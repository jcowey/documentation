var search_data = {"index":{"searchIndex":["apisidentifier","ajaxproxycontroller","applicationcontroller","applicationhelper","biblioformbuilder","biblioidentifier","container","note","publicationperson","publisher","relatedarticle","relateditem","reviewee","shorttitle","biblioidentifierscontroller","board","boardscontroller","collectionidentifier","collectionidentifierscontroller","comment","combinecomment","commentscontroller","communitiescontroller","community","crosssitecontroller","ddbidentifier","ddbidentifierscontroller","decree","decreescontroller","doco","doconode","docoscontroller","docovideoscontroller","emailer","emailermailer","emailerscontroller","event","eventscontroller","gitconf","grit","commit","hgvidentifier","hgvmetaidentifier","hgvmetaconfiguration","hgvtransglossary","entry","hgvtransidentifier","helpercontroller","hgvmetaidentifierhelper","hgvdate","hgvformat","hgvfuzzy","hgvgeo","geospot","place","provenance","hgvmentioneddate","hgvprovenance","hgvpublication","hgvmetaidentifierscontroller","hgvtransglossariescontroller","hgvtransidentifierscontroller","identifier","identifierscontroller","integer","jrubyxml","epidocp4validator","epidocp5validator","jarvvalidator","namespacecontext","parseerror","parseerrorhandler","rdfvalidator","transformerrorlistener","leiden","leidencontroller","linkinginfo","maintenancemode","numbersrdf","numbershelper","timeout","object","prettyssime","publication","publicationscontroller","rexml","document","element","xpath","rails","repositoriescontroller","repository","rpx","rpxexception","rpxhelper","rpxcontroller","translationhelpercontroller","translationleiden","translationleidencontroller","user","usercontroller","useridentifier","vote","votescontroller","welcomecontroller","xpath()","abbrev()","account()","account()","addgeo()","addplace()","addreference()","add_admin()","add_admin_page()","add_alternates()","add_change_desc()","add_collection()","add_collection_to_collection_names_hash()","add_defaults!()","add_entry_to_file()","add_member()","add_member()","add_member()","add_member_page()","add_meta_information!()","add_new_lang_to_xml()","add_remote()","admin()","advanced_create()","advanced_create()","after_create()","after_create()","after_create()","after_destroy()","after_find()","after_initialize()","after_rename()","after_rename()","after_rename()","after_rename()","after_save()","all_children()","all_mappings()","all_users_links()","allow_submit?()","allow_user_withdrawal?()","ancientdia()","appbl()","appsosol()","appalt()","appcorr()","appedit()","apply_xpath()","apply_xpath_to_identifier()","apply_xpath_to_numbers_server_response()","apply_xpath_to_sparql_query()","apply_xsl_transform()","appreg()","appsubst()","archive()","archive()","archive_all()","archive_pub()","archives()","ask_for()","associate_really()","associate_return()","attributelegal?()","auth_info()","author_string()","authorize()","become_finalizer()","before_commit()","before_commit()","before_commit()","before_create()","before_destroy()","before_destroy()","before_validation()","blob()","board_dashboard()","branch()","branch_from_master()","branch_has_database?()","branched_database?()","branches()","breakxpathintolumps()","build()","build_doco()","bulldozepath()","bulldozepath()","bulldoze_path()","canon_controlled_identifiers()","canon_controlled_paths()","centuryoptions()","certain?()","certainty=()","certaintyoptions()","certaintyoptions()","certaintyoptions()","change_finalizer()","change_status()","check_admin()","check_ddb()","children()","children_votes()","clippy()","clone_to_end_user()","clone_to_owner()","collection_identifier_to_identifiers()","collection_names()","collection_names()","collection_names_hash()","collection_names_hash()","collection_names_hash()","collection_names_hash()","collection_xml_with_new_collection()","comment()","comment=()","commentary()","commit_content()","commit_to_canon()","complement_params()","compose_email()","confirm_archive()","confirm_archive_all()","confirm_delete()","confirm_withdraw()","content()","controlled_identifiers()","controlled_paths()","controls_identifier?()","copy_back_to_user()","copy_branch_from_repo()","copy_repo_to_parent_repo()","copy_to_end_user()","copy_to_owner()","creatable_identifiers()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_branch()","create_email_everybody()","create_from_identifier()","create_from_list()","create_from_selector()","create_from_templates()","create_gloss_element()","create_item_element()","create_submit()","current_user_is_master_admin?()","dashboard()","database_configuration()","date=()","dateidoptions()","dateinformation()","dayfromiso()","del_alternates()","delete_branch()","delete_commentary()","delete_entry_in_file()","delete_frontmatter_commentary()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","determine_creatable_identifiers()","developer()","diff_from_canon()","disabled?()","division()","division()","doc_tree()","document_from_string()","documentation()","ebadddecree()","ebaddmember()","ebshow()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit_adjacent()","edit_biblio()","edit_end_user()","edit_meta()","edit_text()","edit_trans()","edit_user_admins()","editxml()","email_everybody()","end_user()","entry_identifier()","epidoc()","epidoctohgv()","epochoptions()","error()","error()","exists?()","expire_leiden_cache()","expire_publication_cache()","expire_publication_cache()","extractfromiso()","fatalerror()","fatalerror()","fetch_objects()","file_template()","finalize()","finalize_review()","find_board_member()","find_finalizer_publication()","find_finalizer_user()","find_first_board()","find_first_board_parent()","find_identifier()","find_identifier()","find_identifier()","find_identifier()","find_item()","find_member()","find_publication()","find_publication_and_identifier()","find_repository()","find_sosol_users()","flatten_commits()","footer()","format()","format()","formatcentury()","formatcenturyqualifier()","formatcertainty()","formatdate()","formatdatefromisoparts()","formatdatepart()","formatday()","formatgeolist()","formatgeospot()","formatmonth()","formatmonthqualifier()","formatoffset()","formatplacelist()","formatprecision()","formatyear()","formatyearqualifier()","format_name()","friendly_name()","friendly_name=()","fully_qualified_and_simple?()","gapall()","generaterandomid()","generate_flash_message()","generate_flash_message()","get()","getbibliopath()","getcentury()","getcenturyqualifier()","getcertaintyitem()","getchron()","getchronmax()","getchronmin()","getchronsimple()","getdayiso()","getemptyepidocitem()","getemptyhgvitem()","getextras()","getfascicle()","getmonthiso()","getmonthqualifier()","getnamespaceuri()","getnumbers()","getobjectlist()","getoffsetitem()","getprecision()","getprecisionitem()","getrelateditemelements()","getside()","gettitletail()","gettypeoptions()","getvolume()","getyeariso()","getyearqualifier()","get_all_comments()","get_all_files_from_path_on_branch()","get_bibliography()","get_blob_data()","get_blob_from_branch()","get_broken_leiden()","get_broken_leiden()","get_choice_array()","get_commits()","get_date_item()","get_date_preview()","get_epidoc_attributes()","get_epidoc_attributes_list()","get_epidoc_attributes_tree()","get_epidoc_attributes_value()","get_file_from_branch()","get_geo_preview()","get_language_translation_leiden()","get_language_translation_leiden()","get_log_for_file_from_branch()","get_recent_commit_sha()","get_transformer()","get_xpath_namespace_context()","get_xsugar_response()","git_author_string()","grit_actor()","has_collection?()","head()","header()","hgvtoepidoc()","hgvnum()","history()","human_name()","human_name()","id_attribute()","id_attribute()","id_attribute()","id_attribute()","identifier_to_components()","identifier_to_identifiers()","identifier_to_local_identifier()","identifier_to_numbers_server_response()","identifier_to_parts()","identifier_to_path()","identifier_to_ref()","identifier_to_title()","identifier_to_url()","identifier_url_to_identifier()","identifiers_to_hash()","increase_timeout()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index_user_admins()","info()","input_source_from_string()","insertfootnote()","insertlinkbiblio()","insertlinkpn()","insert_error_here()","insertlink()","is_community_publication?()","is_reprinted?()","is_submittable?()","is_valid_xml?()","is_valid_xml?()","label()","lang_codes()","leave_community()","legal?()","leiden2xml()","leiden_plus()","leiden_plus_to_xml()","leiden_plus_xml()","leiden_trans()","leiden_translation_to_xml()","line_positive_and_gt_zero()","linebreak()","list_publications()","log_info()","login_return()","make_label()","make_options()","map()","mappings()","master_list()","merge_base()","modified?()","monthfromiso()","monthoptions()","mutable?()","mutable?()","mutable?()","mutable_by?()","n_attribute()","n_attribute()","n_attribute()","n_attribute()","name()","name()","named_node_map_to_hash()","needs_reviewing?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_from_template()","new_from_template()","new_from_templates()","new_lang()","next_temporary_identifier()","next_temporary_identifier()","number()","offset=()","offsetoptions()","offsetoptions()","origin()","origin()","overview()","owner()","owner()","ownership_guard()","parent()","path_to_numbers_server_response()","perform_action?()","populateatomfromhash()","populatefromepidoc()","populatefromepidoccontainer()","populatefromepidocnote()","populatefromepidocoriginalbp()","populatefromepidocperson()","populatefromepidocpublisher()","populatefromepidocrelatedarticle()","populatefromepidocrelateditem()","populatefromepidocreviewee()","populatefromepidocshorttitle()","populatefromepidocsimple()","populate_epidoc_attribute()","populate_epidoc_attributes_from_attributes_hash()","populate_identifiers_from_identifiers()","populate_tree_from_attributes_hash()","precisionoptions()","preprocess()","preprocess_leiden()","pretty_print()","preview()","preview()","preview()","preview()","preview()","preview()","preview()","preview()","print()","process_numbers_server_response_body()","proxy()","prune_params()","publication_from_identifier()","publication_from_identifiers()","rank()","read_xml_item()","recurse_git_tree()","refresh_usage()","related_text()","relatives()","remove_admin()","remove_current_user()","remove_current_user_membership()","remove_finalizer()","remove_member()","remove_member()","remove_member()","remove_openid()","rename()","rename()","rename()","rename_file()","rename_review()","render_404()","render_500()","render_numbers_error()","repo()","repository()","repository()","reprinted_in()","result_action_approve()","result_action_graffiti()","result_action_reject()","result_actions()","result_actions_hash()","retrieve_all_keys()","roman()","roman()","rpx_associate_url()","rpx_signin_url()","rpx_widget_url()","save_broken_leiden_plus_to_xml()","save_broken_leiden_trans_to_xml()","save_comment()","save_comment()","select()","send_email_out()","send_status_emails()","send_to_finalizer()","send_withdraw_note()","set_board_identifier_status()","set_content()","set_content()","set_end_user()","set_epidoc()","set_epidoc()","set_epidoc_attributes()","set_epidoc_attributes_tree()","set_leiden_plus()","set_leiden_translation_content()","set_local_identifier_status()","set_origin_and_local_identifier_status()","set_origin_identifier_status()","set_xml_content()","short_name_to_identifier()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show_commit()","sign_in_out()","signin()","signin_url()","signout()","sort()","sortepidoc()","sparql()","sparql_query_to_numbers_server_response()","sparql_query_to_path()","stream_from_file()","stream_from_string()","stub_text_structure()","submission_reason()","submit()","submit()","submit_to_next_board()","subtype=()","subtype=()","subtypeoptions()","tally()","tally_methods_hash()","tally_votes()","tally_votes()","temporary_path()","terms()","territoryoptions()","text_area()","text_field()","title()","title_to_ref()","titleize()","toxmlstring()","to_chooser()","to_components()","to_hash()","to_path()","to_path()","to_path()","to_path()","to_path()","to_path()","to_str()","translation_already_in_language?()","translation_leiden_to_xml()","translation_leiden_to_xml()","tree()","tryit()","tryit()","type=()","type=()","typeoptions()","unmap()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","updateepidoc()","updateepidocrelateditem()","updatefrompost()","updatefrompostcontainer()","updatefrompostnote()","updatefrompostperson()","updatefrompostpublisher()","updatefrompostrelatedarticle()","updatefrompostrelateditem()","updatefrompostreviewee()","updatefrompostshorttitle()","updatefrompostsimple()","update_admins()","update_commentary()","update_commentary()","update_frontmatter_commentary()","update_frontmatter_commentary()","update_master_from_canonical()","update_personal()","update_rankings()","update_review()","update_revision_desc()","updatexml()","usage_stats()","user_community_dashboard()","user_complete_dashboard()","user_dashboard()","user_has_voted?()","user_has_voted?()","validate()","value=()","vote()","warning()","warning()","whens_hash()","withdraw()","withdraw()","wrap_xml()","write_text()","xml2leiden()","xml_content()","xml_leiden_plus()","xml_title_text()","xml_title_text()","xml_title_text()","xml_title_text()","xml_to_entries()","xml_to_translation_leiden()","xml_to_translation_leiden()","xpath()","xpath_from_string()","xpath_result_to_array()","xsugar()","yearfromiso()","yearoptions()","readme_for_app"],"longSearchIndex":["apisidentifier","ajaxproxycontroller","applicationcontroller","applicationhelper","biblioformbuilder","biblioidentifier","biblioidentifier::container","biblioidentifier::note","biblioidentifier::publicationperson","biblioidentifier::publisher","biblioidentifier::relatedarticle","biblioidentifier::relateditem","biblioidentifier::reviewee","biblioidentifier::shorttitle","biblioidentifierscontroller","board","boardscontroller","collectionidentifier","collectionidentifierscontroller","comment","comment::combinecomment","commentscontroller","communitiescontroller","community","crosssitecontroller","ddbidentifier","ddbidentifierscontroller","decree","decreescontroller","doco","doco::doconode","docoscontroller","docovideoscontroller","emailer","emailermailer","emailerscontroller","event","eventscontroller","gitconf","grit","grit::commit","hgvidentifier","hgvmetaidentifier","hgvmetaidentifier::hgvmetaconfiguration","hgvtransglossary","hgvtransglossary::entry","hgvtransidentifier","helpercontroller","hgvmetaidentifierhelper","hgvmetaidentifierhelper::hgvdate","hgvmetaidentifierhelper::hgvformat","hgvmetaidentifierhelper::hgvfuzzy","hgvmetaidentifierhelper::hgvgeo","hgvmetaidentifierhelper::hgvgeo::geospot","hgvmetaidentifierhelper::hgvgeo::place","hgvmetaidentifierhelper::hgvgeo::provenance","hgvmetaidentifierhelper::hgvmentioneddate","hgvmetaidentifierhelper::hgvprovenance","hgvmetaidentifierhelper::hgvpublication","hgvmetaidentifierscontroller","hgvtransglossariescontroller","hgvtransidentifierscontroller","identifier","identifierscontroller","integer","jrubyxml","jrubyxml::epidocp4validator","jrubyxml::epidocp5validator","jrubyxml::jarvvalidator","jrubyxml::namespacecontext","jrubyxml::parseerror","jrubyxml::parseerrorhandler","jrubyxml::rdfvalidator","jrubyxml::transformerrorlistener","leiden","leidencontroller","linkinginfo","maintenancemode","numbersrdf","numbersrdf::numbershelper","numbersrdf::timeout","object","prettyssime","publication","publicationscontroller","rexml","rexml::document","rexml::element","rexml::xpath","rails","repositoriescontroller","repository","rpx","rpx::rpxexception","rpx::rpxhelper","rpxcontroller","translationhelpercontroller","translationleiden","translationleidencontroller","user","usercontroller","useridentifier","vote","votescontroller","welcomecontroller","biblioidentifier::xpath()","helpercontroller#abbrev()","docovideoscontroller#account()","usercontroller#account()","hgvmetaidentifierhelper::hgvgeo::place#addgeo()","hgvmetaidentifierhelper::hgvgeo::provenance#addplace()","hgvmetaidentifierhelper::hgvgeo::geospot#addreference()","communitiescontroller#add_admin()","communitiescontroller#add_admin_page()","repository#add_alternates()","identifier#add_change_desc()","collectionidentifier#add_collection()","collectionidentifier::add_collection_to_collection_names_hash()","hgvmetaidentifier::hgvmetaconfiguration#add_defaults!()","hgvtransglossary#add_entry_to_file()","boardscontroller#add_member()","communitiescontroller#add_member()","emailerscontroller#add_member()","communitiescontroller#add_member_page()","hgvmetaidentifier::hgvmetaconfiguration#add_meta_information!()","hgvtransidentifierscontroller#add_new_lang_to_xml()","repository#add_remote()","usercontroller#admin()","crosssitecontroller#advanced_create()","publicationscontroller#advanced_create()","board#after_create()","publication#after_create()","user#after_create()","publication#after_destroy()","biblioidentifier#after_find()","hgvmetaidentifier#after_initialize()","ddbidentifier#after_rename()","hgvmetaidentifier#after_rename()","hgvtransidentifier#after_rename()","identifier#after_rename()","vote#after_save()","publication#all_children()","rpx::rpxhelper#all_mappings()","usercontroller#all_users_links()","publicationscontroller#allow_submit?()","publication#allow_user_withdrawal?()","helpercontroller#ancientdia()","helpercontroller#appbl()","helpercontroller#appsosol()","helpercontroller#appalt()","helpercontroller#appcorr()","helpercontroller#appedit()","jrubyxml::apply_xpath()","numbersrdf::numbershelper::apply_xpath_to_identifier()","numbersrdf::numbershelper::apply_xpath_to_numbers_server_response()","numbersrdf::numbershelper::apply_xpath_to_sparql_query()","jrubyxml::apply_xsl_transform()","helpercontroller#appreg()","helpercontroller#appsubst()","publication#archive()","publicationscontroller#archive()","publicationscontroller#archive_all()","publicationscontroller#archive_pub()","usercontroller#archives()","commentscontroller#ask_for()","rpxcontroller#associate_really()","rpxcontroller#associate_return()","hgvmetaidentifier#attributelegal?()","rpx::rpxhelper#auth_info()","user#author_string()","applicationcontroller#authorize()","publicationscontroller#become_finalizer()","ddbidentifier#before_commit()","hgvtransidentifier#before_commit()","identifier#before_commit()","publication#before_create()","board#before_destroy()","user#before_destroy()","publication#before_validation()","repositoriescontroller#blob()","usercontroller#board_dashboard()","identifier#branch()","publication#branch_from_master()","gitconf#branch_has_database?()","gitconf#branched_database?()","repository#branches()","rexml::xpath::breakxpathintolumps()","docoscontroller#build()","doco::build_doco()","rexml::document#bulldozepath()","rexml::element#bulldozepath()","rexml::element::bulldoze_path()","publication#canon_controlled_identifiers()","publication#canon_controlled_paths()","hgvmetaidentifierhelper::hgvdate::centuryoptions()","hgvmetaidentifierhelper::hgvgeo::geospot#certain?()","hgvmetaidentifierhelper::hgvgeo::geospot#certainty=()","hgvmetaidentifierhelper::hgvdate::certaintyoptions()","hgvmetaidentifierhelper::hgvmentioneddate::certaintyoptions()","hgvmetaidentifierhelper::hgvprovenance::certaintyoptions()","publication#change_finalizer()","publication#change_status()","boardscontroller#check_admin()","collectionidentifierscontroller#check_ddb()","identifier#children()","publication#children_votes()","applicationhelper#clippy()","publication#clone_to_end_user()","publication#clone_to_owner()","numbersrdf::numbershelper::collection_identifier_to_identifiers()","ddbidentifier::collection_names()","identifier::collection_names()","apisidentifier::collection_names_hash()","collectionidentifier::collection_names_hash()","ddbidentifier::collection_names_hash()","hgvidentifier::collection_names_hash()","collectionidentifier#collection_xml_with_new_collection()","comment#comment()","comment#comment=()","ddbidentifierscontroller#commentary()","repository#commit_content()","publication#commit_to_canon()","hgvmetaidentifierscontroller#complement_params()","user::compose_email()","publicationscontroller#confirm_archive()","publicationscontroller#confirm_archive_all()","publicationscontroller#confirm_delete()","publicationscontroller#confirm_withdraw()","identifier#content()","publication#controlled_identifiers()","publication#controlled_paths()","board#controls_identifier?()","publication#copy_back_to_user()","repository#copy_branch_from_repo()","publication#copy_repo_to_parent_repo()","publication#copy_to_end_user()","publication#copy_to_owner()","publication#creatable_identifiers()","boardscontroller#create()","commentscontroller#create()","communitiescontroller#create()","decreescontroller#create()","docoscontroller#create()","emailerscontroller#create()","eventscontroller#create()","hgvtransglossariescontroller#create()","identifierscontroller#create()","publicationscontroller#create()","repository#create()","votescontroller#create()","repository#create_branch()","usercontroller#create_email_everybody()","publicationscontroller#create_from_identifier()","publicationscontroller#create_from_list()","publicationscontroller#create_from_selector()","publicationscontroller#create_from_templates()","hgvtransglossary::create_gloss_element()","hgvtransglossary::create_item_element()","rpxcontroller#create_submit()","usercontroller#current_user_is_master_admin?()","usercontroller#dashboard()","gitconf#database_configuration()","hgvmetaidentifierhelper::hgvgeo::provenance#date=()","hgvmetaidentifierhelper::hgvmentioneddate::dateidoptions()","hgvmetaidentifierhelper::hgvmentioneddate::dateinformation()","hgvmetaidentifierhelper::hgvdate::dayfromiso()","repository#del_alternates()","repository#delete_branch()","ddbidentifierscontroller#delete_commentary()","hgvtransglossary#delete_entry_in_file()","ddbidentifierscontroller#delete_frontmatter_commentary()","boardscontroller#destroy()","commentscontroller#destroy()","communitiescontroller#destroy()","decreescontroller#destroy()","docoscontroller#destroy()","emailerscontroller#destroy()","eventscontroller#destroy()","hgvtransglossariescontroller#destroy()","publicationscontroller#destroy()","repository#destroy()","votescontroller#destroy()","publicationscontroller#determine_creatable_identifiers()","usercontroller#developer()","publication#diff_from_canon()","maintenancemode#disabled?()","helpercontroller#division()","translationhelpercontroller#division()","doco::doc_tree()","jrubyxml::document_from_string()","docoscontroller#documentation()","docovideoscontroller#ebadddecree()","docovideoscontroller#ebaddmember()","docovideoscontroller#ebshow()","biblioidentifierscontroller#edit()","boardscontroller#edit()","commentscontroller#edit()","communitiescontroller#edit()","ddbidentifierscontroller#edit()","decreescontroller#edit()","docoscontroller#edit()","emailerscontroller#edit()","eventscontroller#edit()","hgvmetaidentifierscontroller#edit()","hgvtransglossariescontroller#edit()","hgvtransidentifierscontroller#edit()","publicationscontroller#edit()","votescontroller#edit()","publicationscontroller#edit_adjacent()","publicationscontroller#edit_biblio()","communitiescontroller#edit_end_user()","publicationscontroller#edit_meta()","publicationscontroller#edit_text()","publicationscontroller#edit_trans()","usercontroller#edit_user_admins()","identifierscontroller#editxml()","usercontroller#email_everybody()","community#end_user()","publication#entry_identifier()","biblioidentifier#epidoc()","hgvmetaidentifierhelper::hgvdate::epidoctohgv()","hgvmetaidentifierhelper::hgvprovenance::epochoptions()","jrubyxml::parseerrorhandler#error()","jrubyxml::transformerrorlistener#error()","repository#exists?()","identifierscontroller#expire_leiden_cache()","identifierscontroller#expire_publication_cache()","publicationscontroller#expire_publication_cache()","hgvmetaidentifierhelper::hgvdate::extractfromiso()","jrubyxml::parseerrorhandler#fatalerror()","jrubyxml::transformerrorlistener#fatalerror()","repository#fetch_objects()","identifier#file_template()","publicationscontroller#finalize()","publicationscontroller#finalize_review()","emailerscontroller#find_board_member()","publication#find_finalizer_publication()","publication#find_finalizer_user()","publication#find_first_board()","publication#find_first_board_parent()","biblioidentifierscontroller#find_identifier()","ddbidentifierscontroller#find_identifier()","hgvmetaidentifierscontroller#find_identifier()","hgvtransidentifierscontroller#find_identifier()","hgvtransglossary#find_item()","boardscontroller#find_member()","publicationscontroller#find_publication()","ddbidentifierscontroller#find_publication_and_identifier()","repositoriescontroller#find_repository()","emailerscontroller#find_sosol_users()","publication#flatten_commits()","crosssitecontroller#footer()","hgvmetaidentifierhelper::hgvformat::format()","hgvmetaidentifierhelper::hgvprovenance::format()","hgvmetaidentifierhelper::hgvformat::formatcentury()","hgvmetaidentifierhelper::hgvformat::formatcenturyqualifier()","hgvmetaidentifierhelper::hgvformat::formatcertainty()","hgvmetaidentifierhelper::hgvformat::formatdate()","hgvmetaidentifierhelper::hgvformat::formatdatefromisoparts()","hgvmetaidentifierhelper::hgvformat::formatdatepart()","hgvmetaidentifierhelper::hgvformat::formatday()","hgvmetaidentifierhelper::hgvprovenance::formatgeolist()","hgvmetaidentifierhelper::hgvprovenance::formatgeospot()","hgvmetaidentifierhelper::hgvformat::formatmonth()","hgvmetaidentifierhelper::hgvformat::formatmonthqualifier()","hgvmetaidentifierhelper::hgvformat::formatoffset()","hgvmetaidentifierhelper::hgvprovenance::formatplacelist()","hgvmetaidentifierhelper::hgvformat::formatprecision()","hgvmetaidentifierhelper::hgvformat::formatyear()","hgvmetaidentifierhelper::hgvformat::formatyearqualifier()","community#format_name()","board#friendly_name()","board#friendly_name=()","rexml::xpath::fully_qualified_and_simple?()","helpercontroller#gapall()","hgvmetaidentifierhelper#generaterandomid()","biblioidentifierscontroller#generate_flash_message()","hgvmetaidentifierscontroller#generate_flash_message()","hgvmetaidentifierhelper::hgvpublication::get()","biblioidentifier#getbibliopath()","hgvmetaidentifierhelper::hgvdate::getcentury()","hgvmetaidentifierhelper::hgvdate::getcenturyqualifier()","hgvmetaidentifierhelper::hgvdate::getcertaintyitem()","hgvmetaidentifierhelper::hgvfuzzy::getchron()","hgvmetaidentifierhelper::hgvfuzzy::getchronmax()","hgvmetaidentifierhelper::hgvfuzzy::getchronmin()","hgvmetaidentifierhelper::hgvfuzzy::getchronsimple()","hgvmetaidentifierhelper::hgvdate::getdayiso()","hgvmetaidentifierhelper::hgvdate::getemptyepidocitem()","hgvmetaidentifierhelper::hgvdate::getemptyhgvitem()","hgvmetaidentifierhelper::hgvpublication::getextras()","hgvmetaidentifierhelper::hgvpublication::getfascicle()","hgvmetaidentifierhelper::hgvdate::getmonthiso()","hgvmetaidentifierhelper::hgvdate::getmonthqualifier()","jrubyxml::namespacecontext#getnamespaceuri()","hgvmetaidentifierhelper::hgvpublication::getnumbers()","hgvmetaidentifierhelper::hgvgeo::provenance::getobjectlist()","hgvmetaidentifierhelper::hgvdate::getoffsetitem()","hgvmetaidentifierhelper::hgvdate::getprecision()","hgvmetaidentifierhelper::hgvdate::getprecisionitem()","biblioidentifier#getrelateditemelements()","hgvmetaidentifierhelper::hgvpublication::getside()","hgvmetaidentifierhelper::hgvpublication::gettitletail()","hgvmetaidentifierhelper::hgvpublication::gettypeoptions()","hgvmetaidentifierhelper::hgvpublication::getvolume()","hgvmetaidentifierhelper::hgvdate::getyeariso()","hgvmetaidentifierhelper::hgvdate::getyearqualifier()","publication#get_all_comments()","repository#get_all_files_from_path_on_branch()","ajaxproxycontroller#get_bibliography()","repository#get_blob_data()","repository#get_blob_from_branch()","ddbidentifier#get_broken_leiden()","hgvtransidentifier#get_broken_leiden()","decree#get_choice_array()","identifier#get_commits()","hgvmetaidentifier#get_date_item()","hgvmetaidentifierscontroller#get_date_preview()","hgvmetaidentifier#get_epidoc_attributes()","hgvmetaidentifier#get_epidoc_attributes_list()","hgvmetaidentifier#get_epidoc_attributes_tree()","hgvmetaidentifier#get_epidoc_attributes_value()","repository#get_file_from_branch()","hgvmetaidentifierscontroller#get_geo_preview()","translationleiden::get_language_translation_leiden()","translationleidencontroller#get_language_translation_leiden()","repository#get_log_for_file_from_branch()","identifier#get_recent_commit_sha()","jrubyxml::get_transformer()","jrubyxml::get_xpath_namespace_context()","ajaxproxycontroller#get_xsugar_response()","user#git_author_string()","user#grit_actor()","collectionidentifier#has_collection?()","publication#head()","crosssitecontroller#header()","hgvmetaidentifierhelper::hgvdate::hgvtoepidoc()","ajaxproxycontroller#hgvnum()","identifierscontroller#history()","board#human_name()","user#human_name()","biblioidentifier#id_attribute()","ddbidentifier#id_attribute()","hgvmetaidentifier#id_attribute()","hgvtransidentifier#id_attribute()","numbersrdf::numbershelper::identifier_to_components()","numbersrdf::numbershelper::identifier_to_identifiers()","numbersrdf::numbershelper::identifier_to_local_identifier()","numbersrdf::numbershelper::identifier_to_numbers_server_response()","numbersrdf::numbershelper::identifier_to_parts()","numbersrdf::numbershelper::identifier_to_path()","publication#identifier_to_ref()","numbersrdf::numbershelper::identifier_to_title()","numbersrdf::numbershelper::identifier_to_url()","numbersrdf::numbershelper::identifier_url_to_identifier()","numbersrdf::numbershelper::identifiers_to_hash()","repository::increase_timeout()","boardscontroller#index()","commentscontroller#index()","communitiescontroller#index()","decreescontroller#index()","docoscontroller#index()","emailerscontroller#index()","eventscontroller#index()","hgvtransglossariescontroller#index()","publicationscontroller#index()","repositoriescontroller#index()","votescontroller#index()","welcomecontroller#index()","usercontroller#index_user_admins()","usercontroller#info()","jrubyxml::input_source_from_string()","helpercontroller#insertfootnote()","helpercontroller#insertlinkbiblio()","helpercontroller#insertlinkpn()","identifierscontroller#insert_error_here()","helpercontroller#insertlink()","publication#is_community_publication?()","ddbidentifier#is_reprinted?()","community#is_submittable?()","biblioidentifier#is_valid_xml?()","identifier#is_valid_xml?()","biblioformbuilder#label()","hgvtransglossary::lang_codes()","usercontroller#leave_community()","hgvmetaidentifier#legal?()","leidencontroller#leiden2xml()","ddbidentifier#leiden_plus()","ddbidentifier#leiden_plus_to_xml()","leiden::leiden_plus_xml()","hgvtransidentifier#leiden_trans()","hgvtransidentifier#leiden_translation_to_xml()","doco#line_positive_and_gt_zero()","translationhelpercontroller#linebreak()","communitiescontroller#list_publications()","publication#log_info()","rpxcontroller#login_return()","biblioformbuilder#make_label()","biblioformbuilder#make_options()","rpx::rpxhelper#map()","rpx::rpxhelper#mappings()","publicationscontroller#master_list()","publication#merge_base()","publication#modified?()","hgvmetaidentifierhelper::hgvdate::monthfromiso()","hgvmetaidentifierhelper::hgvdate::monthoptions()","biblioidentifier#mutable?()","identifier#mutable?()","publication#mutable?()","publication#mutable_by?()","biblioidentifier#n_attribute()","ddbidentifier#n_attribute()","hgvmetaidentifier#n_attribute()","hgvtransidentifier#n_attribute()","board#name()","repository#name()","jrubyxml::named_node_map_to_hash()","identifier#needs_reviewing?()","biblioidentifier::note::new()","biblioidentifier::publicationperson::new()","biblioidentifier::publisher::new()","biblioidentifier::relatedarticle::new()","biblioidentifier::relateditem::new()","biblioidentifier::shorttitle::new()","boardscontroller#new()","comment::combinecomment::new()","commentscontroller#new()","communitiescontroller#new()","decreescontroller#new()","doco::doconode::new()","docoscontroller#new()","emailerscontroller#new()","eventscontroller#new()","gitconf::new()","hgvmetaidentifier::hgvmetaconfiguration::new()","hgvtransglossary::entry::new()","hgvmetaidentifierhelper::hgvgeo::geospot::new()","hgvmetaidentifierhelper::hgvgeo::place::new()","hgvmetaidentifierhelper::hgvgeo::provenance::new()","jrubyxml::epidocp4validator::new()","jrubyxml::epidocp5validator::new()","jrubyxml::namespacecontext::new()","jrubyxml::parseerror::new()","jrubyxml::rdfvalidator::new()","linkinginfo::new()","publicationscontroller#new()","repository::new()","rpx::rpxexception::new()","rpx::rpxhelper::new()","votescontroller#new()","hgvtransidentifier::new_from_template()","identifier::new_from_template()","publication::new_from_templates()","translationhelpercontroller#new_lang()","biblioidentifier::next_temporary_identifier()","identifier::next_temporary_identifier()","helpercontroller#number()","hgvmetaidentifierhelper::hgvgeo::geospot#offset=()","hgvmetaidentifierhelper::hgvdate::offsetoptions()","hgvmetaidentifierhelper::hgvprovenance::offsetoptions()","identifier#origin()","publication#origin()","boardscontroller#overview()","identifier#owner()","repository#owner()","publicationscontroller#ownership_guard()","identifier#parent()","numbersrdf::numbershelper::path_to_numbers_server_response()","decree#perform_action?()","hgvmetaidentifierhelper::hgvgeo::provenance#populateatomfromhash()","biblioidentifier#populatefromepidoc()","biblioidentifier#populatefromepidoccontainer()","biblioidentifier#populatefromepidocnote()","biblioidentifier#populatefromepidocoriginalbp()","biblioidentifier#populatefromepidocperson()","biblioidentifier#populatefromepidocpublisher()","biblioidentifier#populatefromepidocrelatedarticle()","biblioidentifier#populatefromepidocrelateditem()","biblioidentifier#populatefromepidocreviewee()","biblioidentifier#populatefromepidocshorttitle()","biblioidentifier#populatefromepidocsimple()","hgvmetaidentifier#populate_epidoc_attribute()","hgvmetaidentifier#populate_epidoc_attributes_from_attributes_hash()","publication#populate_identifiers_from_identifiers()","hgvmetaidentifier#populate_tree_from_attributes_hash()","hgvmetaidentifierhelper::hgvdate::precisionoptions()","ddbidentifier::preprocess()","ddbidentifier#preprocess_leiden()","jrubyxml::pretty_print()","biblioidentifier#preview()","biblioidentifierscontroller#preview()","ddbidentifier#preview()","ddbidentifierscontroller#preview()","hgvmetaidentifier#preview()","hgvtransidentifier#preview()","hgvmetaidentifierscontroller#preview()","hgvtransidentifierscontroller#preview()","publication#print()","numbersrdf::numbershelper::process_numbers_server_response_body()","ajaxproxycontroller#proxy()","hgvmetaidentifierscontroller#prune_params()","publicationscontroller#publication_from_identifier()","publicationscontroller#publication_from_identifiers()","boardscontroller#rank()","hgvtransglossary::entry#read_xml_item()","repository#recurse_git_tree()","usercontroller#refresh_usage()","hgvtransidentifier#related_text()","identifier#relatives()","communitiescontroller#remove_admin()","communitiescontroller#remove_current_user()","communitiescontroller#remove_current_user_membership()","publication#remove_finalizer()","boardscontroller#remove_member()","communitiescontroller#remove_member()","emailerscontroller#remove_member()","rpxcontroller#remove_openid()","ddbidentifierscontroller#rename()","identifier#rename()","identifierscontroller#rename()","repository#rename_file()","identifierscontroller#rename_review()","applicationcontroller#render_404()","applicationcontroller#render_500()","applicationcontroller#render_numbers_error()","rails::repo()","identifier#repository()","publication#repository()","ddbidentifier#reprinted_in()","identifier#result_action_approve()","identifier#result_action_graffiti()","identifier#result_action_reject()","board#result_actions()","board#result_actions_hash()","hgvmetaidentifier::hgvmetaconfiguration#retrieve_all_keys()","integer#roman()","integer::roman()","applicationhelper#rpx_associate_url()","applicationhelper#rpx_signin_url()","applicationhelper#rpx_widget_url()","ddbidentifier#save_broken_leiden_plus_to_xml()","hgvtransidentifier#save_broken_leiden_trans_to_xml()","biblioidentifierscontroller#save_comment()","hgvmetaidentifierscontroller#save_comment()","biblioformbuilder#select()","emailermailer#send_email_out()","board#send_status_emails()","publication#send_to_finalizer()","emailermailer#send_withdraw_note()","publication#set_board_identifier_status()","biblioidentifier#set_content()","identifier#set_content()","communitiescontroller#set_end_user()","biblioidentifier#set_epidoc()","hgvmetaidentifier#set_epidoc()","hgvmetaidentifier#set_epidoc_attributes()","hgvmetaidentifier#set_epidoc_attributes_tree()","ddbidentifier#set_leiden_plus()","hgvtransidentifier#set_leiden_translation_content()","publication#set_local_identifier_status()","publication#set_origin_and_local_identifier_status()","publication#set_origin_identifier_status()","identifier#set_xml_content()","collectionidentifier::short_name_to_identifier()","boardscontroller#show()","commentscontroller#show()","communitiescontroller#show()","decreescontroller#show()","docoscontroller#show()","emailerscontroller#show()","eventscontroller#show()","hgvtransglossariescontroller#show()","publicationscontroller#show()","usercontroller#show()","votescontroller#show()","identifierscontroller#show_commit()","crosssitecontroller#sign_in_out()","usercontroller#signin()","rpx::rpxhelper#signin_url()","usercontroller#signout()","hgvmetaidentifier#sort()","biblioidentifier#sortepidoc()","ajaxproxycontroller#sparql()","numbersrdf::numbershelper::sparql_query_to_numbers_server_response()","numbersrdf::numbershelper::sparql_query_to_path()","jrubyxml::stream_from_file()","jrubyxml::stream_from_string()","hgvtransidentifier#stub_text_structure()","publication#submission_reason()","publication#submit()","publicationscontroller#submit()","publication#submit_to_next_board()","hgvmetaidentifierhelper::hgvgeo::geospot#subtype=()","hgvmetaidentifierhelper::hgvgeo::provenance#subtype=()","hgvmetaidentifierhelper::hgvprovenance::subtypeoptions()","vote#tally()","decree::tally_methods_hash()","board#tally_votes()","publication#tally_votes()","hgvidentifier#temporary_path()","translationhelpercontroller#terms()","hgvmetaidentifierhelper::hgvprovenance::territoryoptions()","biblioformbuilder#text_area()","biblioformbuilder#text_field()","identifier#title()","publication#title_to_ref()","identifier#titleize()","biblioidentifier#toxmlstring()","hgvtransglossary#to_chooser()","identifier#to_components()","grit::commit#to_hash()","biblioidentifier#to_path()","collectionidentifier#to_path()","ddbidentifier#to_path()","hgvmetaidentifier#to_path()","hgvtransglossary#to_path()","hgvtransidentifier#to_path()","jrubyxml::parseerror#to_str()","hgvtransidentifier#translation_already_in_language?()","translationleiden::translation_leiden_to_xml()","translationleidencontroller#translation_leiden_to_xml()","repositoriescontroller#tree()","helpercontroller#tryit()","translationhelpercontroller#tryit()","hgvmetaidentifierhelper::hgvgeo::geospot#type=()","hgvmetaidentifierhelper::hgvgeo::provenance#type=()","hgvmetaidentifierhelper::hgvprovenance::typeoptions()","rpx::rpxhelper#unmap()","biblioidentifierscontroller#update()","boardscontroller#update()","collectionidentifierscontroller#update()","commentscontroller#update()","communitiescontroller#update()","ddbidentifierscontroller#update()","decreescontroller#update()","docoscontroller#update()","emailerscontroller#update()","eventscontroller#update()","hgvmetaidentifierscontroller#update()","hgvtransglossariescontroller#update()","hgvtransidentifierscontroller#update()","votescontroller#update()","biblioidentifier#updateepidoc()","biblioidentifier#updateepidocrelateditem()","biblioidentifier#updatefrompost()","biblioidentifier#updatefrompostcontainer()","biblioidentifier#updatefrompostnote()","biblioidentifier#updatefrompostperson()","biblioidentifier#updatefrompostpublisher()","biblioidentifier#updatefrompostrelatedarticle()","biblioidentifier#updatefrompostrelateditem()","biblioidentifier#updatefrompostreviewee()","biblioidentifier#updatefrompostshorttitle()","biblioidentifier#updatefrompostsimple()","usercontroller#update_admins()","ddbidentifier#update_commentary()","ddbidentifierscontroller#update_commentary()","ddbidentifier#update_frontmatter_commentary()","ddbidentifierscontroller#update_frontmatter_commentary()","repository#update_master_from_canonical()","usercontroller#update_personal()","boardscontroller#update_rankings()","collectionidentifierscontroller#update_review()","identifier#update_revision_desc()","identifierscontroller#updatexml()","usercontroller#usage_stats()","usercontroller#user_community_dashboard()","usercontroller#user_complete_dashboard()","usercontroller#user_dashboard()","identifier#user_has_voted?()","publication#user_has_voted?()","jrubyxml::jarvvalidator#validate()","hgvmetaidentifierhelper::hgvgeo::provenance#value=()","publicationscontroller#vote()","jrubyxml::parseerrorhandler#warning()","jrubyxml::transformerrorlistener#warning()","emailerscontroller#whens_hash()","publication#withdraw()","publicationscontroller#withdraw()","biblioidentifier#wrap_xml()","prettyssime#write_text()","leidencontroller#xml2leiden()","identifier#xml_content()","leiden::xml_leiden_plus()","biblioidentifier#xml_title_text()","ddbidentifier#xml_title_text()","hgvmetaidentifier#xml_title_text()","hgvtransidentifier#xml_title_text()","hgvtransglossary#xml_to_entries()","translationleiden::xml_to_translation_leiden()","translationleidencontroller#xml_to_translation_leiden()","hgvmetaidentifier::hgvmetaconfiguration#xpath()","jrubyxml::xpath_from_string()","jrubyxml::xpath_result_to_array()","ajaxproxycontroller#xsugar()","hgvmetaidentifierhelper::hgvdate::yearfromiso()","hgvmetaidentifierhelper::hgvdate::yearoptions()",""],"info":[["APISIdentifier","","APISIdentifier.html","",""],["AjaxProxyController","","AjaxProxyController.html","",""],["ApplicationController","","ApplicationController.html","","<p>Filters added to this controller apply to all controllers in the\napplication. Likewise, all the methods …\n"],["ApplicationHelper","","ApplicationHelper.html","","<p>Methods added to this helper will be available to all templates in the\napplication.\n"],["BiblioFormBuilder","","BiblioFormBuilder.html","","<p>Helper for creation of forms for class <code>BiblioIdentifier</code>\n"],["BiblioIdentifier","","BiblioIdentifier.html","","<p>Model class for bibliography records as they reside in the Biblio folder of\nidp.data’s git repository …\n"],["BiblioIdentifier::Container","","BiblioIdentifier/Container.html","","<p>Specialisation/Facade of class RelatedItem\n"],["BiblioIdentifier::Note","","BiblioIdentifier/Note.html","","<p>Data structure for remarks (i.e. annotation and responsibility)\n"],["BiblioIdentifier::PublicationPerson","","BiblioIdentifier/PublicationPerson.html","","<p>Data structure for personal information first name, last name, name, swap\n"],["BiblioIdentifier::Publisher","","BiblioIdentifier/Publisher.html","","<p>Data structure for publisher information, (i.e. publisherType which can\nhave the values <code>publisher</code> or …\n"],["BiblioIdentifier::RelatedArticle","","BiblioIdentifier/RelatedArticle.html","","<p>Data structure for related articles, (i.e. series, volume, number, ddb, tm\nand inventory)\n"],["BiblioIdentifier::RelatedItem","","BiblioIdentifier/RelatedItem.html","","<p>Data structure for target information pointer, ignoreList and ignored\n(built upon ignore list, read-only) …\n"],["BiblioIdentifier::Reviewee","","BiblioIdentifier/Reviewee.html","","<p>Specialisation/Facade of class RelatedItem\n"],["BiblioIdentifier::ShortTitle","","BiblioIdentifier/ShortTitle.html","","<p>Data structure for short title information (i.e. title and\nresponsibility/style), can be use for journals …\n"],["BiblioIdentifiersController","","BiblioIdentifiersController.html","","<p>Controller for all actions concerning the handling of bibliographical data,\nsuch as edit and update\n"],["Board","","Board.html","","<p>Board represents an editorial review board.\n"],["BoardsController","","BoardsController.html","",""],["CollectionIdentifier","","CollectionIdentifier.html","","<p>Sub-class of Identifier\n\n"],["CollectionIdentifiersController","","CollectionIdentifiersController.html","",""],["Comment","","Comment.html","","<p>Comment represents a comment made on an identifier/publication. Standard\nreasons for a comment are:\n<p><strong>commit</strong> …\n"],["Comment::CombineComment","","Comment/CombineComment.html","",""],["CommentsController","","CommentsController.html","",""],["CommunitiesController","","CommunitiesController.html","",""],["Community","","Community.html","","<p>Communities are designed to allow anyone to create their own set of boards\nand editorial review. The …\n"],["CrossSiteController","","CrossSiteController.html","","<p>The CrossSiteController provides urls for other sites to access PE\npartials. This is mainly so PN and …\n"],["DDBIdentifier","","DDBIdentifier.html","","<p>Sub-class of Identifier\n<p>Includes acts_as_leiden_plus defined in\nvendor/plugins/rxsugar/lib/jruby_helper.rb …\n\n"],["DdbIdentifiersController","","DdbIdentifiersController.html","",""],["Decree","","Decree.html","","<p>Decrees represent the possible choices, outcomes and counting methods of a\nvote.\n"],["DecreesController","","DecreesController.html","",""],["Doco","","Doco.html","","<p>Procssing of Docos table records used for Text and Translation\nDocumentation\n"],["Doco::DocoNode","","Doco/DocoNode.html","","<p>to contain detail documentation data\n<p>see Doco.doc_tree for how used\n\n"],["DocosController","","DocosController.html","","<p>Procssing of Docos used for Text and Translation Documentation\n"],["DocovideosController","","DocovideosController.html","",""],["Emailer","","Emailer.html","","<p>Emailer contains the information needed to send emails by boards when a\npublication’s status changes. …\n"],["EmailerMailer","","EmailerMailer.html","","<p>EmailerMailer sends emails.\n"],["EmailersController","","EmailersController.html","",""],["Event","","Event.html","","<p>Logs events for news feed.\n"],["EventsController","","EventsController.html","",""],["GitConf","","GitConf.html","","<p>Adjust your environment.rb to use this subclass:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rails</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Initializer</span>.<span class=\"ruby-identifier\">run</span>(:<span class=\"ruby-identifier\">process</span>, <span class=\"ruby-constant\">GitConf</span>.<span class=\"ruby-identifier\">new</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">config</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Grit","","Grit.html","",""],["Grit::Commit","","Grit/Commit.html","",""],["HGVIdentifier","","HGVIdentifier.html","","<p>Sub-class of Identifier\n<p>This is a superclass for HGVMetaIdentifier and HGVTransIdentifier shared\nconstants …\n\n"],["HGVMetaIdentifier","","HGVMetaIdentifier.html","",""],["HGVMetaIdentifier::HgvMetaConfiguration","","HGVMetaIdentifier/HgvMetaConfiguration.html","","<p>Reads out config/hgv.yml and stores all configuration parameters in an\ninstance variable called +@scheme+. …\n"],["HGVTransGlossary","","HGVTransGlossary.html","",""],["HGVTransGlossary::Entry","","HGVTransGlossary/Entry.html","",""],["HGVTransIdentifier","","HGVTransIdentifier.html","","<p>Sub-class of HGVIdentifier\n<p>Includes acts_as_translation defined in\nvendor/plugins/rxsugar/lib/jruby_helper.rb …\n\n"],["HelperController","","HelperController.html","","<p>Used to display DDB Text (Helper Menu or Commentary) Pop-up Windows\n"],["HgvMetaIdentifierHelper","","HgvMetaIdentifierHelper.html","","<p>Helper functions for complex EpiDoc transformations, date operations and\nform data for select boxes\n"],["HgvMetaIdentifierHelper::HgvDate","","HgvMetaIdentifierHelper/HgvDate.html","","<p>Module for HGV date transformations and option values\n"],["HgvMetaIdentifierHelper::HgvFormat","","HgvMetaIdentifierHelper/HgvFormat.html","","<p>Module for the generation of HGV stylish date strings\n"],["HgvMetaIdentifierHelper::HgvFuzzy","","HgvMetaIdentifierHelper/HgvFuzzy.html","","<p>Module to turn HGV date vague qualifiers (beginning, middle, end, late,\nearly) into hard values\n"],["HgvMetaIdentifierHelper::HgvGeo","","HgvMetaIdentifierHelper/HgvGeo.html","","<p>Module for HGV geo data class definitions (provenance, place and geo)\n"],["HgvMetaIdentifierHelper::HgvGeo::GeoSpot","","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html","","<p>Data structure for geo information\n"],["HgvMetaIdentifierHelper::HgvGeo::Place","","HgvMetaIdentifierHelper/HgvGeo/Place.html","","<p>Data structure for place information\n"],["HgvMetaIdentifierHelper::HgvGeo::Provenance","","HgvMetaIdentifierHelper/HgvGeo/Provenance.html","","<p>Data structure for provenance information\n"],["HgvMetaIdentifierHelper::HgvMentionedDate","","HgvMetaIdentifierHelper/HgvMentionedDate.html","","<p>Module for transformations and option values for HGV mentioned date\n"],["HgvMetaIdentifierHelper::HgvProvenance","","HgvMetaIdentifierHelper/HgvProvenance.html","","<p>Module for the formatting of HGV geo data, uses data structures that are\nprovided by the <code>HgvGeo</code> module …\n"],["HgvMetaIdentifierHelper::HgvPublication","","HgvMetaIdentifierHelper/HgvPublication.html","","<p>Module for HGV publication data\n"],["HgvMetaIdentifiersController","","HgvMetaIdentifiersController.html","","<p>Controller for all actions concerning the hgv metadata editor, such as\nedit, update, show preview and …\n"],["HgvTransGlossariesController","","HgvTransGlossariesController.html","",""],["HgvTransIdentifiersController","","HgvTransIdentifiersController.html","",""],["Identifier","","Identifier.html","","<p>Super-class of all identifiers\n\n"],["IdentifiersController","","IdentifiersController.html","","<p>Superclass of the ddb (Text), hgv_Meta, and hgv_trans controllers\n<p>contains methods common to these identifiers …\n\n"],["Integer","","Integer.html","",""],["JRubyXML","","JRubyXML.html","",""],["JRubyXML::EpiDocP4Validator","","JRubyXML/EpiDocP4Validator.html","",""],["JRubyXML::EpiDocP5Validator","","JRubyXML/EpiDocP5Validator.html","",""],["JRubyXML::JARVValidator","","JRubyXML/JARVValidator.html","","<p>iso-relax.sourceforge.net/JARV/JARV.html\n"],["JRubyXML::NamespaceContext","","JRubyXML/NamespaceContext.html","",""],["JRubyXML::ParseError","","JRubyXML/ParseError.html","",""],["JRubyXML::ParseErrorHandler","","JRubyXML/ParseErrorHandler.html","",""],["JRubyXML::RDFValidator","","JRubyXML/RDFValidator.html","",""],["JRubyXML::TransformErrorListener","","JRubyXML/TransformErrorListener.html","",""],["Leiden","","Leiden.html","","<p>Created as sub-class of DDBIdentifier because it already has the\nacts_as_leiden_plus\n<p>Converts DDB Text …\n"],["LeidenController","","LeidenController.html","","<p>No associated views - just call the methods to do DDB Text Leiden+ and XML\nconversions\n"],["LinkingInfo","","LinkingInfo.html","",""],["MaintenanceMode","","MaintenanceMode.html","","<p>Taken from: tinyurl.com/kqyeyh Enables cap deploy:web:disable/enable with\nservers such as Passenger  …\n"],["NumbersRDF","","NumbersRDF.html","",""],["NumbersRDF::NumbersHelper","","NumbersRDF/NumbersHelper.html","","<p>Provides a number of class methods for working with identifiers and the\nNumbers Server\n"],["NumbersRDF::Timeout","","NumbersRDF/Timeout.html","",""],["Object","","Object.html","",""],["PrettySsime","","PrettySsime.html","",""],["Publication","","Publication.html","","<p>A publication is the basic object of the editorial workflow. The\npublication consists of a collection …\n"],["PublicationsController","","PublicationsController.html","",""],["REXML","","REXML.html","",""],["REXML::Document","","REXML/Document.html","",""],["REXML::Element","","REXML/Element.html","",""],["REXML::XPath","","REXML/XPath.html","",""],["Rails","","Rails.html","",""],["RepositoriesController","","RepositoriesController.html","",""],["Repository","","Repository.html","",""],["Rpx","","Rpx.html","",""],["Rpx::RpxException","","Rpx/RpxException.html","",""],["Rpx::RpxHelper","","Rpx/RpxHelper.html","",""],["RpxController","","RpxController.html","",""],["TranslationHelperController","","TranslationHelperController.html","",""],["TranslationLeiden","","TranslationLeiden.html","","<p>Created as sub-class of HGVTransIdentifier because it already has the\nacts_as_translation\n<p>Converts Translation …\n"],["TranslationLeidenController","","TranslationLeidenController.html","","<p>No associated views - just call the methods to do Translation Leiden+ and\nXML conversions for translations …\n"],["User","","User.html","","<p>Represents a system user.\n"],["UserController","","UserController.html","",""],["UserIdentifier","","UserIdentifier.html","",""],["Vote","","Vote.html","","<p>Holds information about a vote.\n"],["VotesController","","VotesController.html","",""],["WelcomeController","","WelcomeController.html","",""],["XPATH","BiblioIdentifier","BiblioIdentifier.html#method-c-XPATH","(key)","<p>Retrieve xpath for a given key\n<p><strong>Args</strong>  :\n<p><code>key</code> → biblio key, e.g. <code>:articleTitle</code>\n"],["abbrev","HelperController","HelperController.html#method-i-abbrev","()","<p>Helper Markup Abbreviations\n"],["account","DocovideosController","DocovideosController.html#method-i-account","()",""],["account","UserController","UserController.html#method-i-account","()",""],["addGeo","HgvMetaIdentifierHelper::HgvGeo::Place","HgvMetaIdentifierHelper/HgvGeo/Place.html#method-i-addGeo","(geo)","<p>Mutator method for member variable <code>geoList</code>\n<p><strong>Args</strong>  :\n<p><code>geo</code> → <code>GeoSpot</code> object that shall be appended to\nmember …\n"],["addPlace","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-i-addPlace","(place)","<p>Mutator method for member variable <code>placeList</code>\n<p><strong>Args</strong>  :\n<p><code>place</code> → <code>Place</code> object that shall be appended to\nmember …\n"],["addReference","HgvMetaIdentifierHelper::HgvGeo::GeoSpot","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html#method-i-addReference","(value)","<p>Mutator method for member variable <code>referenceList</code>\n<p><strong>Args</strong>  :\n<p><code>value</code> → <code>String</code> object that shall be appended\n…\n"],["add_admin","CommunitiesController","CommunitiesController.html#method-i-add_admin","()","<p>Adds user to community admin list.\n"],["add_admin_page","CommunitiesController","CommunitiesController.html#method-i-add_admin_page","()",""],["add_alternates","Repository","Repository.html#method-i-add_alternates","(other_repo)",""],["add_change_desc","Identifier","Identifier.html#method-i-add_change_desc","(text = \"\", user_info = self.publication.creator, input_content = nil)","<p>Add a ‘change’ tag into the tei:revisionDesc of the identifer’s XML\nfile via XSLT\n<p>does not do a commit …\n"],["add_collection","CollectionIdentifier","CollectionIdentifier.html#method-i-add_collection","(short_name, long_name, actor)",""],["add_collection_to_collection_names_hash","CollectionIdentifier","CollectionIdentifier.html#method-c-add_collection_to_collection_names_hash","(short_name, long_name)",""],["add_defaults!","HGVMetaIdentifier::HgvMetaConfiguration","HGVMetaIdentifier/HgvMetaConfiguration.html#method-i-add_defaults-21","(item)","<p>Adds optional attributes (suchs as mulplicity or default values) to a\nconfiguration item\n<p><strong>Args</strong>  :\n<p><code>item</code> → …\n"],["add_entry_to_file","HGVTransGlossary","HGVTransGlossary.html#method-i-add_entry_to_file","(entry)",""],["add_member","BoardsController","BoardsController.html#method-i-add_member","()","<p>Adds the user to the board member list.\n"],["add_member","CommunitiesController","CommunitiesController.html#method-i-add_member","()","<p>Adds a member to the community members list. These are the users who can\nsubmit to the community.\n"],["add_member","EmailersController","EmailersController.html#method-i-add_member","()",""],["add_member_page","CommunitiesController","CommunitiesController.html#method-i-add_member_page","()","<p>def find_member\n\n<pre>@community = Community.find(params[:id])</pre>\n<p>end\n"],["add_meta_information!","HGVMetaIdentifier::HgvMetaConfiguration","HGVMetaIdentifier/HgvMetaConfiguration.html#method-i-add_meta_information-21","(configuration)","<p>Recursively adds optional attributes to configuration e.g.\n<code>:optional</code> defaults to <code>true</code> whereas\n<code>:multiple</code> …\n"],["add_new_lang_to_xml","HgvTransIdentifiersController","HgvTransIdentifiersController.html#method-i-add_new_lang_to_xml","()","<p>Add new ‘div’ type=“translation” with new language attribute\n<p><strong>Params</strong>  :\n<p><code>lang</code> -&gt; the new language …\n"],["add_remote","Repository","Repository.html#method-i-add_remote","(other_repo)",""],["admin","UserController","UserController.html#method-i-admin","()","<p>Admin Settings allow certain rights to these groups.\n<p>Master Admin: Can set all user admin rights\n<p>Community …\n"],["advanced_create","CrossSiteController","CrossSiteController.html#method-i-advanced_create","()","<p>Partial with link to advanced publication creation page.\n"],["advanced_create","PublicationsController","PublicationsController.html#method-i-advanced_create","()",""],["after_create","Board","Board.html#method-i-after_create","()",""],["after_create","Publication","Publication.html#method-i-after_create","()","<p>TODO: rename actual branch after branch attribute rename\n"],["after_create","User","User.html#method-i-after_create","()",""],["after_destroy","Publication","Publication.html#method-i-after_destroy","()",""],["after_find","BiblioIdentifier","BiblioIdentifier.html#method-i-after_find","()","<p>Retrieves data from xml or sets empty defaults Side effect on\n<code>self</code> attributes\n"],["after_initialize","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-after_initialize","()","<p>Loads <code>HgvMetaConfiguration</code> object (HGV xpaath for EpiDoc and\noptions for the editor) and presets valid …\n"],["after_rename","DDBIdentifier","DDBIdentifier.html#method-i-after_rename","(options = {})",""],["after_rename","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-after_rename","(options = {})","<p>?\n"],["after_rename","HGVTransIdentifier","HGVTransIdentifier.html#method-i-after_rename","(options = {})","<p>Processing needed after user performs the ‘rename’ function during\nfinalization.  Performed using XSLT …\n"],["after_rename","Identifier","Identifier.html#method-i-after_rename","(options = {})","<p>Place anything actions you need performed on all identifiers after a\n‘rename’ has occurred\n<p>nothin in here …\n\n"],["after_save","Vote","Vote.html#method-i-after_save","()","<p>Ensures vote is tallied after it is saved.\n"],["all_children","Publication","Publication.html#method-i-all_children","()","<p><strong>Returns</strong> <code>array</code> of all of this publication’s\nchildren.\n"],["all_mappings","Rpx::RpxHelper","Rpx/RpxHelper.html#method-i-all_mappings","()",""],["all_users_links","UserController","UserController.html#method-i-all_users_links","()",""],["allow_submit?","PublicationsController","PublicationsController.html#method-i-allow_submit-3F","()",""],["allow_user_withdrawal?","Publication","Publication.html#method-i-allow_user_withdrawal-3F","(user)","<p>Checks to see if user should be allowed to withdraw their submitted\npublication.\n<p><strong>Returns</strong>\n<p><code>true</code> if user can …\n"],["ancientdia","HelperController","HelperController.html#method-i-ancientdia","()","<p>Helper Symbols Ancient Diacriticals Double\n"],["appBL","HelperController","HelperController.html#method-i-appBL","()","<p>Helper Markup Apparatus Corrections from BL\n"],["appSoSOL","HelperController","HelperController.html#method-i-appSoSOL","()","<p>Helper Markup Apparatus New correction in SoSOL\n"],["appalt","HelperController","HelperController.html#method-i-appalt","()","<p>Helper Markup Apparatus Alternate readings\n"],["appcorr","HelperController","HelperController.html#method-i-appcorr","()","<p>Helper Markup Apparatus Modern correction\n"],["appedit","HelperController","HelperController.html#method-i-appedit","()","<p>Helper Markup Apparatus Editorial correction\n"],["apply_xpath","JRubyXML","JRubyXML.html#method-c-apply_xpath","(input_document_string, input_xpath_string, namespace_aware = false)",""],["apply_xpath_to_identifier","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-apply_xpath_to_identifier","(xpath, identifier, decorator = 'rdf')","<p>Performs a Numbers Server request on an identifier and applies XPath to the\nresponse\n"],["apply_xpath_to_numbers_server_response","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-apply_xpath_to_numbers_server_response","(xpath, response)","<p>Applies XPath to an HTTP response (assumed to be XML).\n"],["apply_xpath_to_sparql_query","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-apply_xpath_to_sparql_query","(xpath, sparql_query)","<p>Runs a SPARQL query and applies XPath to the response\n"],["apply_xsl_transform","JRubyXML","JRubyXML.html#method-c-apply_xsl_transform","(xml_stream, xsl_stream, parameters = {})",""],["appreg","HelperController","HelperController.html#method-i-appreg","()","<p>Helper Markup Apparatus Modern regularization\n"],["appsubst","HelperController","HelperController.html#method-i-appsubst","()","<p>Helper Markup Apparatus Scribal correction/substitution\n"],["archive","Publication","Publication.html#method-i-archive","()","<p>Sets the status to archived and renames the title with the date-time to\nprevent future title collisions. …\n"],["archive","PublicationsController","PublicationsController.html#method-i-archive","()",""],["archive_all","PublicationsController","PublicationsController.html#method-i-archive_all","()","<p>loop thru all the committed publication ids and archive each one\n<p>clear the cache\n<p>go to the dashboard\n"],["archive_pub","PublicationsController","PublicationsController.html#method-i-archive_pub","(pub_id)",""],["archives","UserController","UserController.html#method-i-archives","()",""],["ask_for","CommentsController","CommentsController.html#method-i-ask_for","()","<p>GET\n<p>shows current comments and gives form for new comment\n\n"],["associate_really","RpxController","RpxController.html#method-i-associate_really","()",""],["associate_return","RpxController","RpxController.html#method-i-associate_return","()",""],["attributeLegal?","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-attributeLegal-3F","(key)","<p>Tells whether a certain key is a valid HGV accessor\n<p><strong>Args</strong>  :\n<p><code>key</code> → doubted HGV key\n"],["auth_info","Rpx::RpxHelper","Rpx/RpxHelper.html#method-i-auth_info","(token, token_url)",""],["author_string","User","User.html#method-i-author_string","()",""],["authorize","ApplicationController","ApplicationController.html#method-i-authorize","()",""],["become_finalizer","PublicationsController","PublicationsController.html#method-i-become_finalizer","()",""],["before_commit","DDBIdentifier","DDBIdentifier.html#method-i-before_commit","(content)","<p>Place any actions you always want to perform on DDB Text identifier content\nprior to it being committed …\n"],["before_commit","HGVTransIdentifier","HGVTransIdentifier.html#method-i-before_commit","(content)","<p>Place any actions you always want to perform on translation identifier\ncontent prior to it being committed …\n"],["before_commit","Identifier","Identifier.html#method-i-before_commit","(content)","<p>Put stuff in here you want to do do all identifiers before a commit is done\n<p>currently no logic is in …\n\n"],["before_create","Publication","Publication.html#method-i-before_create","()","<p>Should check the owner’s repo to make sure the branch doesn’t exist and\nhalt if so\n"],["before_destroy","Board","Board.html#method-i-before_destroy","()",""],["before_destroy","User","User.html#method-i-before_destroy","()",""],["before_validation","Publication","Publication.html#method-i-before_validation","()","<p>If branch hasn’t been specified, create it from the title before\nvalidation, replacing spaces with underscore. …\n"],["blob","RepositoriesController","RepositoriesController.html#method-i-blob","()",""],["board_dashboard","UserController","UserController.html#method-i-board_dashboard","()","<p>Shows dashboard for the current user’s board using the specified\nboard_id.\n"],["branch","Identifier","Identifier.html#method-i-branch","()","<p><strong>Returns</strong> :\n<p>the repository branch for this identifier\n\n\n"],["branch_from_master","Publication","Publication.html#method-i-branch_from_master","()",""],["branch_has_database?","GitConf","GitConf.html#method-i-branch_has_database-3F","(branch)",""],["branched_database?","GitConf","GitConf.html#method-i-branched_database-3F","()",""],["branches","Repository","Repository.html#method-i-branches","()",""],["breakXpathIntoLumps","REXML::XPath","REXML/XPath.html#method-c-breakXpathIntoLumps","(xpath)","<p>Breaks a given xpath into a sequence of individual tags and attributes\n<p><strong>Args</strong>  :\n<p><code>xpath</code> → sth. like /abc/a[@a=‘a’] …\n"],["build","DocosController","DocosController.html#method-i-build","()",""],["build_doco","Doco","Doco.html#method-c-build_doco","(docotype)","<p>selects all the documenation records from the ‘docos’ table for\n‘docotype’ as @<code>all_docos</code>\n<p>ordered by category, …\n\n"],["bulldozePath","REXML::Document","REXML/Document.html#method-i-bulldozePath","(xpath, value = nil)","<p>Passthrough to class method <code>bulldoze_path</code>\n<p><strong>Args</strong>  :\n<p><code>xpath</code> → desired xpath <code>STRING</code>\n"],["bulldozePath","REXML::Element","REXML/Element.html#method-i-bulldozePath","(xpath, value = nil)","<p>Passthrough to class method <code>bulldoze_path</code>\n<p><strong>Args</strong>  :\n<p><code>xpath</code> → desired xpath <code>STRING</code>\n"],["bulldoze_path","REXML::Element","REXML/Element.html#method-c-bulldoze_path","(element, xpath, value = nil)","<p>Chisels an xpath into an existing xml document/element, traces that are\nalready there will be used, missing …\n"],["canon_controlled_identifiers","Publication","Publication.html#method-i-canon_controlled_identifiers","()",""],["canon_controlled_paths","Publication","Publication.html#method-i-canon_controlled_paths","()",""],["centuryOptions","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-centuryOptions","()","<p>Assembles all valid century qualifiers for HGV date\n(<code>beginning</code>, <code>middle</code>, <code>end</code>, etc.)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s …\n"],["certain?","HgvMetaIdentifierHelper::HgvGeo::GeoSpot","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html#method-i-certain-3F","()","<p>Accessor method for member variable <code>certainty</code>\n<p><strong>Returns</strong> :\n<p>true if <code>certainty</code> is <code>:low</code>, false otherwise\n"],["certainty=","HgvMetaIdentifierHelper::HgvGeo::GeoSpot","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html#method-i-certainty-3D","(value)","<p>Mutator method for member variable <code>certainty</code> If value for\n<code>certainty</code> is invalid <code>certainty</code> will be set …\n"],["certaintyOptions","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-certaintyOptions","()","<p>Assembles all valid certainty options for HGV date (<code>low</code>,\n<code>day</code>, <code>month</code>, <code>year</code>, etc.)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s …\n"],["certaintyOptions","HgvMetaIdentifierHelper::HgvMentionedDate","HgvMetaIdentifierHelper/HgvMentionedDate.html#method-c-certaintyOptions","()","<p>Assembles all valid uncertainty options for HGV mentioned dates\n(<code>dayUncertain</code>, <code>dayAndMonthUncertain</code>, …\n"],["certaintyOptions","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-certaintyOptions","()","<p>Assembles all valid certainty options for HGV provenance (<code>low</code>)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s that can be …\n"],["change_finalizer","Publication","Publication.html#method-i-change_finalizer","(new_finalizer)",""],["change_status","Publication","Publication.html#method-i-change_status","(new_status)",""],["check_admin","BoardsController","BoardsController.html#method-i-check_admin","()","<p>Ensures user has admin rights to view page. Otherwise returns 403 error.\n"],["check_ddb","CollectionIdentifiersController","CollectionIdentifiersController.html#method-i-check_ddb","()","<p>Ensures user has DDB rights to view page. Otherwise returns 403 error.\n"],["children","Identifier","Identifier.html#method-i-children","()","<p><strong>Returns</strong> :\n<p>all the children of the publication that contains this identifier\n\n\n"],["children_votes","Publication","Publication.html#method-i-children_votes","()","<p>total votes for the publication children in voting status\n"],["clippy","ApplicationHelper","ApplicationHelper.html#method-i-clippy","(textarea_id, bgcolor='#FFFFFF')",""],["clone_to_end_user","Publication","Publication.html#method-i-clone_to_end_user","()","<p>Creates a new publication for the end_user (of a community) that is a\nseparate copy of this publication. …\n"],["clone_to_owner","Publication","Publication.html#method-i-clone_to_owner","(new_owner)","<p>Creates a new publication for the new_owner that is a separate copy of this\npublication.\n<p><strong>Args</strong> <code>new_owner</code> …\n"],["collection_identifier_to_identifiers","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-collection_identifier_to_identifiers","(identifier)","<p>Turns e.g. ‘papyri.info/hgv/P.Amh._2_48’ into\n[‘papyri.info/hgv/123’, …]\n"],["collection_names","DDBIdentifier","DDBIdentifier.html#method-c-collection_names","()",""],["collection_names","Identifier","Identifier.html#method-c-collection_names","()","<p>Creates an array of all the collection names for the associated identifier\nclass (HGV, DDB, APIS)\n<p><strong>Returns</strong> …\n"],["collection_names_hash","APISIdentifier","APISIdentifier.html#method-c-collection_names_hash","()",""],["collection_names_hash","CollectionIdentifier","CollectionIdentifier.html#method-c-collection_names_hash","()",""],["collection_names_hash","DDBIdentifier","DDBIdentifier.html#method-c-collection_names_hash","()",""],["collection_names_hash","HGVIdentifier","HGVIdentifier.html#method-c-collection_names_hash","()","<p>Creates a hash of the names of all the HGV Collections available in SoSOL\nreplacing ‘_’ with space\n<p>used …\n\n"],["collection_xml_with_new_collection","CollectionIdentifier","CollectionIdentifier.html#method-i-collection_xml_with_new_collection","(short_name, long_name)",""],["comment","Comment","Comment.html#method-i-comment","()",""],["comment=","Comment","Comment.html#method-i-comment-3D","(comment_text)",""],["commentary","DdbIdentifiersController","DdbIdentifiersController.html#method-i-commentary","()","<p>Pull DDB Text XML file from repository and creates a page set via XSLT up\nto add, modify, or delete  …\n"],["commit_content","Repository","Repository.html#method-i-commit_content","(file, branch, data, comment, actor = nil)","<p>Returns a String of the SHA1 of the commit\n"],["commit_to_canon","Publication","Publication.html#method-i-commit_to_canon","()",""],["complement_params","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-complement_params","()","<p>Adds additional information to incoming post data (e.g. adds hgv formatted\ndate string for each date …\n"],["compose_email","User","User.html#method-c-compose_email","(subject_line, email_content)","<p>Sends an email to all users on the system that have an email address.\n<strong>Args</strong>\n<p><code>subject_line</code> the email’s subject …\n"],["confirm_archive","PublicationsController","PublicationsController.html#method-i-confirm_archive","()",""],["confirm_archive_all","PublicationsController","PublicationsController.html#method-i-confirm_archive_all","()",""],["confirm_delete","PublicationsController","PublicationsController.html#method-i-confirm_delete","()",""],["confirm_withdraw","PublicationsController","PublicationsController.html#method-i-confirm_withdraw","()",""],["content","Identifier","Identifier.html#method-i-content","()","<p><strong>Returns</strong> :\n<p>the cotent of the file containing this identifier from the repository\n\n\n"],["controlled_identifiers","Publication","Publication.html#method-i-controlled_identifiers","()","<p>Determines which identifiers are controlled by this publication’s board.\n<strong>Returns</strong>\n<p>array of identifiers …\n"],["controlled_paths","Publication","Publication.html#method-i-controlled_paths","()","<p>Determines paths for identifiers that are controlled by this\npublication’s board. <strong>Returns</strong>\n<p>array of paths …\n"],["controls_identifier?","Board","Board.html#method-i-controls_identifier-3F","(identifier)","<p><strong>Args</strong>:\n<p><code>identifier</code> identifier or subclass of identifier\n\n<p><strong>Returns</strong>:\n"],["copy_back_to_user","Publication","Publication.html#method-i-copy_back_to_user","(commit_comment, committer_user)","<p>Copies changes made to this publication back to the creator’s (origin)\npublication. Preserves commit …\n"],["copy_branch_from_repo","Repository","Repository.html#method-i-copy_branch_from_repo","(branch, new_branch, other_repo)","<p>(from_branch, to_branch, from_repo)\n"],["copy_repo_to_parent_repo","Publication","Publication.html#method-i-copy_repo_to_parent_repo","()","<p>copy a child publication repo back to the parent repo\n"],["copy_to_end_user","Publication","Publication.html#method-i-copy_to_end_user","()","<p>mainly used to create new publiation title/repo name that is indicative of\nthe publications source\n"],["copy_to_owner","Publication","Publication.html#method-i-copy_to_owner","(new_owner)","<p>copies this publication’s branch to the new_owner’s branch returns\nduplicate publication with new_owner …\n"],["creatable_identifiers","Publication","Publication.html#method-i-creatable_identifiers","()",""],["create","BoardsController","BoardsController.html#method-i-create","()","<p>POST /boards POST /boards.xml\n"],["create","CommentsController","CommentsController.html#method-i-create","()","<p>POST /comments POST /comments.xml\n"],["create","CommunitiesController","CommunitiesController.html#method-i-create","()","<p>POST /communities POST /communities.xml\n"],["create","DecreesController","DecreesController.html#method-i-create","()","<p>POST /decrees POST /decrees.xml\n"],["create","DocosController","DocosController.html#method-i-create","()","<p>POST /docos POST /docos.xml\n"],["create","EmailersController","EmailersController.html#method-i-create","()","<p>POST /emailers POST /emailers.xml\n"],["create","EventsController","EventsController.html#method-i-create","()","<p>POST /events POST /events.xml\n"],["create","HgvTransGlossariesController","HgvTransGlossariesController.html#method-i-create","()","<p>POST /hgv_trans_glossaries POST /hgv_trans_glossaries.xml\n"],["create","IdentifiersController","IdentifiersController.html#method-i-create","()","<p>POST /identifiers\n"],["create","PublicationsController","PublicationsController.html#method-i-create","()","<p>POST /publications POST /publications.xml\n"],["create","Repository","Repository.html#method-i-create","()",""],["create","VotesController","VotesController.html#method-i-create","()","<p>POST /votes POST /votes.xml\n"],["create_branch","Repository","Repository.html#method-i-create_branch","(name, source_name = 'master')",""],["create_email_everybody","UserController","UserController.html#method-i-create_email_everybody","()",""],["create_from_identifier","PublicationsController","PublicationsController.html#method-i-create_from_identifier","()",""],["create_from_list","PublicationsController","PublicationsController.html#method-i-create_from_list","()","<p>list is in the form of pn id’s separated by returns\n\n<pre>such as</pre>\n<p>papyri.info/ddbdp/bgu;7;1504 papyri.info/ddbdp/bgu …\n"],["create_from_selector","PublicationsController","PublicationsController.html#method-i-create_from_selector","()",""],["create_from_templates","PublicationsController","PublicationsController.html#method-i-create_from_templates","()",""],["create_gloss_element","HGVTransGlossary","HGVTransGlossary.html#method-c-create_gloss_element","(lang, definition)",""],["create_item_element","HGVTransGlossary","HGVTransGlossary.html#method-c-create_item_element","(glossaryEntry)",""],["create_submit","RpxController","RpxController.html#method-i-create_submit","()",""],["current_user_is_master_admin?","UserController","UserController.html#method-i-current_user_is_master_admin-3F","()",""],["dashboard","UserController","UserController.html#method-i-dashboard","()","<p>Entry point for dashboards. Will redirect to board_dashboard if given\nboard_id. Will redirect to user_dashboard …\n"],["database_configuration","GitConf","GitConf.html#method-i-database_configuration","()","<p>agument the original method in order to append the branch name suffix in\ncertain conditions\n"],["date=","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-i-date-3D","(value)","<p>Mutator method for member variable <code>date</code> If value for\n<code>date</code> is invalid, <code>date</code> will be set to\n<code>nil</code>\n<p><strong>Args</strong>  : …\n"],["dateIdOptions","HgvMetaIdentifierHelper::HgvMentionedDate","HgvMetaIdentifierHelper/HgvMentionedDate.html#method-c-dateIdOptions","()","<p>Assembles all valid date alternatives for HGV mentioned dates\n(<code>dateAlternativeX</code>, <code>dateAlternativeY</code>,\n<code>date</code> …\n"],["dateInformation","HgvMetaIdentifierHelper::HgvMentionedDate","HgvMetaIdentifierHelper/HgvMentionedDate.html#method-c-dateInformation","(mentioned_date)","<p>Transforms EpiDoc structure provided by <code>HgvIdentifier</code> class\n(nested values, attributes, children) into …\n"],["dayFromIso","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-dayFromIso","(iso)","<p>Facade for HgvDate.extractFromIso\n<p><strong>Args</strong>  :\n<p><code>iso</code> ISO formatted date <code>String</code>\n"],["del_alternates","Repository","Repository.html#method-i-del_alternates","(other_repo)",""],["delete_branch","Repository","Repository.html#method-i-delete_branch","(name)",""],["delete_commentary","DdbIdentifiersController","DdbIdentifiersController.html#method-i-delete_commentary","()","<p>Deletes Line by Line commentary from a DDB Text\n<p><strong>Params</strong>  :\n<p><code>line_id</code> -&gt; id attribute value of the ‘li’ …\n"],["delete_entry_in_file","HGVTransGlossary","HGVTransGlossary.html#method-i-delete_entry_in_file","(item_id)",""],["delete_frontmatter_commentary","DdbIdentifiersController","DdbIdentifiersController.html#method-i-delete_frontmatter_commentary","()","<p>Deletes Front Matter commentary from a DDB Text\n<p><strong>Params</strong>  :\n<p><code>none</code>\n"],["destroy","BoardsController","BoardsController.html#method-i-destroy","()","<p>DELETE /boards/1 DELETE /boards/1.xml\n"],["destroy","CommentsController","CommentsController.html#method-i-destroy","()","<p>DELETE /comments/1 DELETE /comments/1.xml\n"],["destroy","CommunitiesController","CommunitiesController.html#method-i-destroy","()","<p>DELETE /communities/1 DELETE /communities/1.xml\n"],["destroy","DecreesController","DecreesController.html#method-i-destroy","()","<p>DELETE /decrees/1 DELETE /decrees/1.xml\n"],["destroy","DocosController","DocosController.html#method-i-destroy","()","<p>DELETE /docos/1 DELETE /docos/1.xml\n"],["destroy","EmailersController","EmailersController.html#method-i-destroy","()","<p>DELETE /emailers/1 DELETE /emailers/1.xml\n"],["destroy","EventsController","EventsController.html#method-i-destroy","()","<p>DELETE /events/1 DELETE /events/1.xml\n"],["destroy","HgvTransGlossariesController","HgvTransGlossariesController.html#method-i-destroy","()","<p>DELETE /hgv_trans_glossaries/1 DELETE /hgv_trans_glossaries/1.xml\n"],["destroy","PublicationsController","PublicationsController.html#method-i-destroy","()","<p>DELETE\n"],["destroy","Repository","Repository.html#method-i-destroy","()",""],["destroy","VotesController","VotesController.html#method-i-destroy","()","<p>DELETE /votes/1 DELETE /votes/1.xml\n"],["determine_creatable_identifiers","PublicationsController","PublicationsController.html#method-i-determine_creatable_identifiers","()",""],["developer","UserController","UserController.html#method-i-developer","()",""],["diff_from_canon","Publication","Publication.html#method-i-diff_from_canon","()",""],["disabled?","MaintenanceMode","MaintenanceMode.html#method-i-disabled-3F","()",""],["division","HelperController","HelperController.html#method-i-division","()","<p>Helper Markup Document Divisions Other\n"],["division","TranslationHelperController","TranslationHelperController.html#method-i-division","()","<p>Helper Division Other\n"],["doc_tree","Doco","Doco.html#method-c-doc_tree","()","<p>loops through all the ‘docos’ table records selected in build_doco -\nordered by category, line\n<p>creates …\n"],["document_from_string","JRubyXML","JRubyXML.html#method-c-document_from_string","(input_string, namespace_aware = false)",""],["documentation","DocosController","DocosController.html#method-i-documentation","()","<p>if param is not blank, calls Doco.build_doco method with param to pull data\nfrom DB to pass to the ‘viewdoco’ …\n"],["ebadddecree","DocovideosController","DocovideosController.html#method-i-ebadddecree","()",""],["ebaddmember","DocovideosController","DocovideosController.html#method-i-ebaddmember","()",""],["ebshow","DocovideosController","DocovideosController.html#method-i-ebshow","()",""],["edit","BiblioIdentifiersController","BiblioIdentifiersController.html#method-i-edit","()","<p>Retrieves bibliography object from database and displays all values in a\nentry mask Assumes that incoming …\n"],["edit","BoardsController","BoardsController.html#method-i-edit","()","<p>GET /boards/1/edit\n"],["edit","CommentsController","CommentsController.html#method-i-edit","()","<p>GET /comments/1/edit\n"],["edit","CommunitiesController","CommunitiesController.html#method-i-edit","()","<p>GET /communities/1/edit\n"],["edit","DdbIdentifiersController","DdbIdentifiersController.html#method-i-edit","()","<p>GET /publications/1/ddb_identifiers/1/edit\n<p>Edit DDB Text via Leiden+\n\n"],["edit","DecreesController","DecreesController.html#method-i-edit","()","<p>GET /decrees/1/edit\n"],["edit","DocosController","DocosController.html#method-i-edit","()","<p>GET /docos/1/edit\n"],["edit","EmailersController","EmailersController.html#method-i-edit","()","<p>GET /emailers/1/edit\n"],["edit","EventsController","EventsController.html#method-i-edit","()","<p>GET /events/1/edit\n"],["edit","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-edit","()","<p>Retrieves hgv identifier object from database and calls up HGV metadata\neditor Assumes that incoming …\n"],["edit","HgvTransGlossariesController","HgvTransGlossariesController.html#method-i-edit","()","<p>GET /hgv_trans_glossaries/1/edit\n"],["edit","HgvTransIdentifiersController","HgvTransIdentifiersController.html#method-i-edit","()","<p>Edit Translation\n"],["edit","PublicationsController","PublicationsController.html#method-i-edit","()","<p>GET /publications/1/edit\n"],["edit","VotesController","VotesController.html#method-i-edit","()","<p>GET /votes/1/edit\n"],["edit_adjacent","PublicationsController","PublicationsController.html#method-i-edit_adjacent","()",""],["edit_biblio","PublicationsController","PublicationsController.html#method-i-edit_biblio","()",""],["edit_end_user","CommunitiesController","CommunitiesController.html#method-i-edit_end_user","()",""],["edit_meta","PublicationsController","PublicationsController.html#method-i-edit_meta","()",""],["edit_text","PublicationsController","PublicationsController.html#method-i-edit_text","()",""],["edit_trans","PublicationsController","PublicationsController.html#method-i-edit_trans","()",""],["edit_user_admins","UserController","UserController.html#method-i-edit_user_admins","()",""],["editxml","IdentifiersController","IdentifiersController.html#method-i-editxml","()","<p>GET /publications/1/xxx_identifiers/1/editxml\n<p>edit the XML file from the repository of the associated …\n\n"],["email_everybody","UserController","UserController.html#method-i-email_everybody","()",""],["end_user","Community","Community.html#method-i-end_user","()","<p>The end_user is a sosol user to whom the communities’ finalized\npublications are copied.\n"],["entry_identifier","Publication","Publication.html#method-i-entry_identifier","()","<p>entry point identifier to use when we’re just coming in from a\npublication\n"],["epiDoc","BiblioIdentifier","BiblioIdentifier.html#method-i-epiDoc","()","<p>Creates REXML object model from xml string\n<p><strong>Returns</strong> :\n<p>+REXML::Document+ with biblio EpiDoc\n"],["epidocToHgv","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-epidocToHgv","(date_item)","<p>Transforms EpiDoc structure provided by <code>HgvIdentifier</code> class\n(nested values, attributes, children) into …\n"],["epochOptions","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-epochOptions","()","<p>Assembles all valid subtype options for HGV geo spot (<code>ancient</code>,\n<code>modern</code>)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s that …\n"],["error","JRubyXML::ParseErrorHandler","JRubyXML/ParseErrorHandler.html#method-i-error","(e)",""],["error","JRubyXML::TransformErrorListener","JRubyXML/TransformErrorListener.html#method-i-error","(e)",""],["exists?","Repository","Repository.html#method-i-exists-3F","(path)",""],["expire_leiden_cache","IdentifiersController","IdentifiersController.html#method-i-expire_leiden_cache","()",""],["expire_publication_cache","IdentifiersController","IdentifiersController.html#method-i-expire_publication_cache","()",""],["expire_publication_cache","PublicationsController","PublicationsController.html#method-i-expire_publication_cache","(user_id = @current_user.id)",""],["extractFromIso","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-extractFromIso","(iso, regex)","<p>Finds the corresponding month qualifier of a given day range\n<p><strong>Args</strong>  :\n<p><code>iso</code> ISO formatted date <code>String</code>\n"],["fatalError","JRubyXML::ParseErrorHandler","JRubyXML/ParseErrorHandler.html#method-i-fatalError","(e)","<p>Errors will be SAXParseException objects\n"],["fatalError","JRubyXML::TransformErrorListener","JRubyXML/TransformErrorListener.html#method-i-fatalError","(e)","<p>Errors will be TransformerException objects\n"],["fetch_objects","Repository","Repository.html#method-i-fetch_objects","(other_repo)",""],["file_template","Identifier","Identifier.html#method-i-file_template","()","<p>Creates ERB file from retrieved default XML file template for the\nassociated identifier class\n<p><strong>Returns</strong> …\n"],["finalize","PublicationsController","PublicationsController.html#method-i-finalize","()",""],["finalize_review","PublicationsController","PublicationsController.html#method-i-finalize_review","()",""],["find_board_member","EmailersController","EmailersController.html#method-i-find_board_member","()",""],["find_finalizer_publication","Publication","Publication.html#method-i-find_finalizer_publication","()","<p><strong>Returns</strong> the finalizer’s <code>publication</code> or\n<code>nil</code> if there is no finalizer.\n"],["find_finalizer_user","Publication","Publication.html#method-i-find_finalizer_user","()","<p><strong>Returns</strong> the <code>user</code> who is finalizing this\npublication or <code>nil</code> if no one finalizing this publication.\n"],["find_first_board","Publication","Publication.html#method-i-find_first_board","()","<p>Finds the closest parent(or self) publication whose owner is a board.\nReturns that board.\n<p><strong>Returns</strong>\n<p><code>board</code> …\n"],["find_first_board_parent","Publication","Publication.html#method-i-find_first_board_parent","()","<p>Finds the closest parent(or self) publication whose owner is a board.\nReturns that publication.\n<p><strong>Returns</strong> …\n"],["find_identifier","BiblioIdentifiersController","BiblioIdentifiersController.html#method-i-find_identifier","()","<p>Retrieves biblio identifier from database by id which it takes from the\nincoming post stream Assumes …\n"],["find_identifier","DdbIdentifiersController","DdbIdentifiersController.html#method-i-find_identifier","()","<p>Sets the identifier instance variable values\n<p><strong>Params</strong>  :\n<p><code>id</code> -&gt; id from identifier table of the DDB Text …\n"],["find_identifier","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-find_identifier","()","<p>Retrieves hgv identifier from database by id which it takes from the\nincoming post stream Assumes that …\n"],["find_identifier","HgvTransIdentifiersController","HgvTransIdentifiersController.html#method-i-find_identifier","()","<p>Sets the identifier instance variable values\n<p><strong>Params</strong>  :\n<p><code>id</code> -&gt; id from identifier table of the Translation …\n"],["find_item","HGVTransGlossary","HGVTransGlossary.html#method-i-find_item","(item_id)",""],["find_member","BoardsController","BoardsController.html#method-i-find_member","()",""],["find_publication","PublicationsController","PublicationsController.html#method-i-find_publication","()",""],["find_publication_and_identifier","DdbIdentifiersController","DdbIdentifiersController.html#method-i-find_publication_and_identifier","()","<p>Sets the publication instance variable values and then calls\nfind_identifier\n<p><strong>Params</strong>  :\n<p><code>publication_id</code> -&gt; …\n"],["find_repository","RepositoriesController","RepositoriesController.html#method-i-find_repository","()",""],["find_sosol_users","EmailersController","EmailersController.html#method-i-find_sosol_users","()",""],["flatten_commits","Publication","Publication.html#method-i-flatten_commits","(finalizing_publication, finalizer, board_members)",""],["footer","CrossSiteController","CrossSiteController.html#method-i-footer","()","<p>Partial with complete footer.\n"],["format","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-format","(key, list)","<p>Helper function to retrieve a key from a list\n<p><strong>Args</strong>  :\n<p><code>key</code> → <code>String</code> or <code>Symbol</code>\n"],["format","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-format","(provenanceList)","<p>Formats a list of <code>Provenance</code> objects according to HGV style\n<p><strong>Args</strong>  :\n<p><code>provenanceList</code> → list <code>Provenance</code> …\n"],["formatCentury","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatCentury","(century)","<p>Generates pretty format for century information\n<p><strong>Args</strong>  :\n<p><code>century</code> → <code>String</code> or <code>Integer</code> number\n"],["formatCenturyQualifier","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatCenturyQualifier","(q)","<p>Generates pretty format for century qualifier\n<p><strong>Args</strong>  :\n<p><code>q</code> → <code>Symbol</code>, century qualifier, e.g.\n<code>:beginning</code> …\n"],["formatCertainty","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatCertainty","(certainty)","<p>Generates pretty format for offset values\n<p><strong>Args</strong>  :\n<p><code>offset</code> → :before, :after, :beforeUncertain or :after …\n"],["formatDate","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatDate","(date_item)","<p>Generates pretty date format from a date item\n<p><strong>Args</strong>  :\n<p><code>date_item</code> → Hash structure with date information …\n"],["formatDateFromIsoParts","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatDateFromIsoParts","(isoWhen, isoNotBefore = nil, isoNotAfter = nil, certainty = nil)","<p>Generates pretty date format from a bunch of ISO dates\n<p><strong>Args</strong>  :\n<p><code>isoWhen</code> → ISO date\n"],["formatDatePart","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatDatePart","(c = nil, y = nil, m = nil, d = nil, cq = nil, yq = nil, mq = nil, offset = nil)","<p>Generates pretty date format from various bits of information (century,\nyear, month, day, qualifiers …\n"],["formatDay","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatDay","(day)","<p>Generates pretty format for day information\n<p><strong>Args</strong>  :\n<p><code>day</code> → <code>String</code> or <code>Integer</code> number\n"],["formatGeoList","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-formatGeoList","(geoList)","<p>Formats a given list of <code>GeoSpot</code> objects according to HGV style\n<p><strong>Args</strong>  :\n<p><code>geoList</code> → <code>Array</code> of <code>GeoSpot</code> objects\n…\n"],["formatGeoSpot","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-formatGeoSpot","(geoSpot)","<p>Formats a single <code>GeoSpot</code> object according to HGV style\n<p><strong>Args</strong>  :\n<p><code>geoSpot</code> → <code>GeoSpot</code> object\n"],["formatMonth","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatMonth","(month)","<p>Generates pretty format for month information\n<p><strong>Args</strong>  :\n<p><code>month</code> → <code>String</code> or <code>Integer</code> number\n"],["formatMonthQualifier","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatMonthQualifier","(q)","<p>Generates pretty format for month qualifier\n<p><strong>Args</strong>  :\n<p><code>q</code> → <code>Symbol</code>, month qualifier, e.g.\n<code>:beginning</code>, <code>:middle</code> …\n"],["formatOffset","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatOffset","(offset)","<p>Generates pretty format for offset values\n<p><strong>Args</strong>  :\n<p><code>offset</code> → :before, :after, :beforeUncertain or :after …\n"],["formatPlaceList","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-formatPlaceList","(placeList)","<p>Formats a given list of <code>Place</code> objects according to HGV style\n<p><strong>Args</strong>  :\n<p><code>placeList</code> → <code>Array</code> of <code>Place</code> objects\n…\n"],["formatPrecision","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatPrecision","(precision)","<p>Generates pretty format for date precision\n<p><strong>Args</strong>  :\n<p><code>precision</code> → :ca\n"],["formatYear","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatYear","(year)","<p>Generates pretty format for year information\n<p><strong>Args</strong>  :\n<p><code>year</code> → <code>String</code> or <code>Integer</code> number\n"],["formatYearQualifier","HgvMetaIdentifierHelper::HgvFormat","HgvMetaIdentifierHelper/HgvFormat.html#method-c-formatYearQualifier","(q)","<p>Generates pretty format for year qualifier\n<p><strong>Args</strong>  :\n<p><code>q</code> → <code>Symbol</code>, year qualifier, e.g.\n<code>:beginning</code>, <code>:middle</code> …\n"],["format_name","Community","Community.html#method-i-format_name","()","<p><strong>Returns</strong>\n<p>a standard format for the community name and friendly_name.\n\n<p>Used to ensure consistency throughout …\n"],["friendly_name","Board","Board.html#method-i-friendly_name","()","<p>Since board title is used to determine repository names, the title cannot\nbe changed after board creation. …\n"],["friendly_name=","Board","Board.html#method-i-friendly_name-3D","(fn)","<p>Since friendly_name is an added feature, the existing boards will not have\nthis data, so for backward …\n"],["fully_qualified_and_simple?","REXML::XPath","REXML/XPath.html#method-c-fully_qualified_and_simple-3F","(xpath)","<p>Checks whether xpath is fully qualified from root to tip and whether it is\nfree of functional logic and …\n"],["gapall","HelperController","HelperController.html#method-i-gapall","()","<p>Helper Markup Missing, illegible, or not transcribed\n"],["generateRandomId","HgvMetaIdentifierHelper","HgvMetaIdentifierHelper.html#method-i-generateRandomId","(prefix = '')","<p>Generates a random six-letter-code\n<p><strong>Args</strong>  :\n<p><code>prefix</code> → a string that should be prepended to the resulting\n…\n"],["generate_flash_message","BiblioIdentifiersController","BiblioIdentifiersController.html#method-i-generate_flash_message","()","<p>Copypasted from HgvMetaIdentifiersController\n"],["generate_flash_message","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-generate_flash_message","()","<p>Writes some helpful status information for the user, e.g. ‘File update’\nplus some quick links to guide …\n"],["get","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-get","(type, publicationExtra)","<p>Facade to access a typed bit of information from a publication\n<p><strong>Args</strong>  :\n<p><code>type</code> → type to extract (<code>:volume</code> …\n"],["getBiblioPath","BiblioIdentifier","BiblioIdentifier.html#method-i-getBiblioPath","(biblioId)","<p>Builds the file path for a given biblio id, e.g. Biblio/1/23.xml\n<p><strong>Args</strong>  :\n<p><code>biblioId</code> → biblioId, e.g. <code>12345</code> …\n"],["getCentury","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getCentury","(year)","<p>Finds the century of a given year\n<p><strong>Args</strong>  :\n<p><code>year</code> <code>Integer</code> value, e.g. -1234\n"],["getCenturyQualifier","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getCenturyQualifier","(year, year2)","<p>Finds the corresponding century qualifier of a given year range\n<p><strong>Args</strong>  :\n<p><code>year</code> <code>Integer</code> value of first year …\n"],["getCertaintyItem","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getCertaintyItem","(match)","<p>Generate HGV EpiDoc like structure for certainty information (see\nconfig/hgv.yml)\n<p><strong>Args</strong>  :\n<p><code>match</code> → qualifier …\n"],["getChron","HgvMetaIdentifierHelper::HgvFuzzy","HgvMetaIdentifierHelper/HgvFuzzy.html#method-c-getChron","(c, y, m, d, cq, yq, mq, chron = :chron)","<p>Generates HGV formatted date <code>String</code> from date bits\n<p><strong>Args</strong>  :\n<p><code>c</code> → <code>Integer</code> or <code>String</code>\nrepresentation of century, …\n"],["getChronMax","HgvMetaIdentifierHelper::HgvFuzzy","HgvMetaIdentifierHelper/HgvFuzzy.html#method-c-getChronMax","(c, y, m, d, cq, yq, mq)","<p>Short cut for HgvFuzzy.getChron … :chronMax\n<p><strong>Args</strong>  :\n<p><code>c</code> → <code>Integer</code> or <code>String</code>\nrepresentation of century, …\n"],["getChronMin","HgvMetaIdentifierHelper::HgvFuzzy","HgvMetaIdentifierHelper/HgvFuzzy.html#method-c-getChronMin","(c, y, m, d, cq, yq, mq)","<p>Short cut for HgvFuzzy.getChron … :chronMin\n<p><strong>Args</strong>  :\n<p><code>c</code> → <code>Integer</code> or <code>String</code>\nrepresentation of century, …\n"],["getChronSimple","HgvMetaIdentifierHelper::HgvFuzzy","HgvMetaIdentifierHelper/HgvFuzzy.html#method-c-getChronSimple","(c, y, m, d, cq, yq, mq, chron = :chron)","<p>Wrapper function for getChron which gets rid of all values for month and\nday which were not explicitely …\n"],["getDayIso","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getDayIso","(day, month, monthQualifier, chron)","<p>Get ISO formatted month (DD)\n<p><strong>Args</strong>  :\n<p><code>day</code> <code>String</code> or <code>Integer</code>, that contains\na number, e.g. 31, may be <code>nil</code> …\n"],["getEmptyEpidocItem","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getEmptyEpidocItem","()","<p>Provides an empty HGV EpiDoc date item\n<p><strong>Returns</strong> :\n<p>nested <code>Hash</code> structure with all relevant date keys, i.e. …\n"],["getEmptyHgvItem","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getEmptyHgvItem","()","<p>Provides an empty HGV date item\n<p><strong>Returns</strong> :\n<p>flat <code>Hash</code> structure with all relevant date keys, i.e. century,\n…\n"],["getExtras","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-getExtras","(publicationExtra)","<p>Populates handy <code>Array</code> from complex EpiDoc structure\n<p><strong>Args</strong>  :\n<p><code>publicationExtra</code> → publication data as provided …\n"],["getFascicle","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-getFascicle","(publicationExtra)","<p>Facade to access a publication’s fascicle information\n<p><strong>Args</strong>  :\n<p><code>publicationExtra</code> → publication data as …\n"],["getMonthIso","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getMonthIso","(month, yearQualifier, chron)","<p>Get ISO formatted month (MM)\n<p><strong>Args</strong>  :\n<p><code>month</code> <code>String</code>, that contains a number, e.g. 5, may\nbe <code>nil</code>\n"],["getMonthQualifier","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getMonthQualifier","(day = nil, day2 = nil)","<p>Finds the corresponding month qualifier of a given day range\n<p><strong>Args</strong>  :\n<p><code>day</code> <code>Integer</code> value of first day, may …\n"],["getNamespaceURI","JRubyXML::NamespaceContext","JRubyXML/NamespaceContext.html#method-i-getNamespaceURI","(prefix)",""],["getNumbers","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-getNumbers","(publicationExtra)","<p>Facade to access a publication’s numbers information\n<p><strong>Args</strong>  :\n<p><code>publicationExtra</code> → publication data as provided …\n"],["getObjectList","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-c-getObjectList","(epiDocList)","<p>Factory method for batch loading an <code>Array</code> of\n<code>Provenance</code> objects\n<p><strong>Args</strong>  :\n<p><code>epiDocList</code> → data contained in …\n"],["getOffsetItem","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getOffsetItem","(offset, position)","<p>Generate HGV EpiDoc like structure for offset information (see\nconfig/hgv.yml)\n<p><strong>Args</strong>  :\n<p><code>offset</code> → <code>:before</code> …\n"],["getPrecision","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getPrecision","(precision, cx, yx, mx)","<p>Precision making process\n<p><strong>Args</strong>  :\n<p><code>precision</code> → circa\n"],["getPrecisionItem","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getPrecisionItem","(degree, match = nil)","<p>Generate HGV EpiDoc like structure for precision information (see\nconfig/hgv.yml)\n<p><strong>Args</strong>  :\n<p><code>degree</code> → degree …\n"],["getRelatedItemElements","BiblioIdentifier","BiblioIdentifier.html#method-i-getRelatedItemElements","(biblioId)","<p>Grabs another biblio file from <code>CANONICAL_REPOSITORY</code>‘s master\nbranch and extracts its title, author, date, …\n"],["getSide","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-getSide","(publicationExtra)","<p>Facade to access a publication’s side information\n<p><strong>Args</strong>  :\n<p><code>publicationExtra</code> → publication data as provided …\n"],["getTitleTail","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-getTitleTail","(publicationExtra)","<p>Builds a chain of publication features that need to append to a\npublication’s title in order to tell …\n"],["getTypeOptions","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-getTypeOptions","()","<p>Assembles all possible values for publication parts, such as +S. …+ for\npages or +Kol. …+ for column …\n"],["getVolume","HgvMetaIdentifierHelper::HgvPublication","HgvMetaIdentifierHelper/HgvPublication.html#method-c-getVolume","(publicationExtra)","<p>Facade to access a publication’s volume information\n<p><strong>Args</strong>  :\n<p><code>publicationExtra</code> → publication data as provided …\n"],["getYearIso","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getYearIso","(century, centuryQualifier, chron)","<p>Get ISO formatted year ([-]YYYY)\n<p><strong>Args</strong>  :\n<p><code>century</code> → signed integer, e.g. -5\n"],["getYearQualifier","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-getYearQualifier","(month = nil, month2 = nil)","<p>Finds the corresponding year qualifier of a given month range\n<p><strong>Args</strong>  :\n<p><code>month</code> <code>Integer</code> value of first month, …\n"],["get_all_comments","Publication","Publication.html#method-i-get_all_comments","(title)",""],["get_all_files_from_path_on_branch","Repository","Repository.html#method-i-get_all_files_from_path_on_branch","(path = '', branch = 'master')",""],["get_bibliography","AjaxProxyController","AjaxProxyController.html#method-i-get_bibliography","()","<p>Gets the HTTP response from PN solr query\n"],["get_blob_data","Repository","Repository.html#method-i-get_blob_data","(blob)",""],["get_blob_from_branch","Repository","Repository.html#method-i-get_blob_from_branch","(file, branch = 'master')","<p>returns the blob that represents the given file the given file is the\nfilename + path to the file\n"],["get_broken_leiden","DDBIdentifier","DDBIdentifier.html#method-i-get_broken_leiden","(original_xml = nil)","<p>Extracts ‘Leiden+ that will not parse’ from DDB Text XML file if it was\nsaved by the user\n<p><strong>Args</strong>  :\n<p><code>original_xml</code> …\n"],["get_broken_leiden","HGVTransIdentifier","HGVTransIdentifier.html#method-i-get_broken_leiden","(original_xml = nil)","<p>Extracts ‘Leiden+ that will not parse’ from Translation XML file if it\nwas saved by the user\n<p><strong>Args</strong>  :\n<p><code>original_xml</code> …\n"],["get_choice_array","Decree","Decree.html#method-i-get_choice_array","()","<p><strong>Returns</strong>\n<p>an array of the possible choices that represent this decree.\n\n"],["get_commits","Identifier","Identifier.html#method-i-get_commits","()","<p>Retrieve the commits made to a file in the repository\n<p><strong>Returns</strong> :\n<p>array of commits\n"],["get_date_item","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-get_date_item","(date_id)","<p>Retrieves a single date item (X, Y or Z) from instance variable +self+\n<p><strong>Args</strong>  :\n<p><code>date_id</code> → id of wanted …\n"],["get_date_preview","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-get_date_preview","()","<p>Provides a small data preview snippets (values for when, notBefore and\nnotAfter as well as the hgv formatted …\n"],["get_epidoc_attributes","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-get_epidoc_attributes","()","<p>Retrieves metadata from xml and stores the information as object attributes\nPopulates instance variable …\n"],["get_epidoc_attributes_list","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-get_epidoc_attributes_list","(doc, config)","<p>Looks for a certain xpath that has been configured via <code>hgv.yml</code>\nand returns a value list containing all …\n"],["get_epidoc_attributes_tree","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-get_epidoc_attributes_tree","(doc, config)","<p>Retrieves relevant data from EpiDoc and stores it within a simple tree\nstructure, where each node may …\n"],["get_epidoc_attributes_value","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-get_epidoc_attributes_value","(doc, config)","<p>Retrieves the value (the stripped text representation) of a HGV item\n<p><strong>Args</strong>  :\n<p><code>doc</code> → REXML::Document / …\n"],["get_file_from_branch","Repository","Repository.html#method-i-get_file_from_branch","(file, branch = 'master')",""],["get_geo_preview","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-get_geo_preview","()","<p>Takes user’s geo data from post stream and generates a hgv formatted\npreview from it Assumes that hgv …\n"],["get_language_translation_leiden","TranslationLeiden","TranslationLeiden.html#method-c-get_language_translation_leiden","(lang)","<p>Get the Leiden to insert a specific new language div in a translation\n<p><strong>not</strong> <strong>in</strong> <strong>use</strong>\n<strong>currently</strong>\n\n"],["get_language_translation_leiden","TranslationLeidenController","TranslationLeidenController.html#method-i-get_language_translation_leiden","()","<p>Get the Leiden to insert a specific new language div in a translation\n<p><strong>not</strong> <strong>in</strong> <strong>use</strong>\n<strong>currently</strong>\n\n"],["get_log_for_file_from_branch","Repository","Repository.html#method-i-get_log_for_file_from_branch","(file, branch = 'master')",""],["get_recent_commit_sha","Identifier","Identifier.html#method-i-get_recent_commit_sha","()","<p>Parse out most recent sha from log\n<p><strong>Returns</strong> :\n<p>id of latest commit as a string\n"],["get_transformer","JRubyXML","JRubyXML.html#method-c-get_transformer","(xsl_stream = nil)",""],["get_xpath_namespace_context","JRubyXML","JRubyXML.html#method-c-get_xpath_namespace_context","(document)",""],["get_xsugar_response","AjaxProxyController","AjaxProxyController.html#method-i-get_xsugar_response","(params)",""],["git_author_string","User","User.html#method-i-git_author_string","()",""],["grit_actor","User","User.html#method-i-grit_actor","()",""],["has_collection?","CollectionIdentifier","CollectionIdentifier.html#method-i-has_collection-3F","(short_name)",""],["head","Publication","Publication.html#method-i-head","()",""],["header","CrossSiteController","CrossSiteController.html#method-i-header","()","<p>Partial with complete header.\n"],["hgvToEpidoc","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-hgvToEpidoc","(date_item)","<p>Transforms simple <code>Hash</code> structure (flat map of key as and\nvalues) into EpiDoc structure that can be digested …\n"],["hgvnum","AjaxProxyController","AjaxProxyController.html#method-i-hgvnum","()",""],["history","IdentifiersController","IdentifiersController.html#method-i-history","()","<p>GET /publications/1/xxx_identifiers/1/history\n<p>retrieve the history of commits from the repository for …\n\n"],["human_name","Board","Board.html#method-i-human_name","()",""],["human_name","User","User.html#method-i-human_name","()",""],["id_attribute","BiblioIdentifier","BiblioIdentifier.html#method-i-id_attribute","()","<p>?\n"],["id_attribute","DDBIdentifier","DDBIdentifier.html#method-i-id_attribute","()","<p>Returns value for ‘id’ attribute in DDB Text template\n"],["id_attribute","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-id_attribute","()","<p>?\n"],["id_attribute","HGVTransIdentifier","HGVTransIdentifier.html#method-i-id_attribute","()","<p>Returns value for ‘id’ attribute in Translation template\n"],["identifier_to_components","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_components","(identifier)","<p>Splits identifier into component array by slashes\n"],["identifier_to_identifiers","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_identifiers","(identifier)","<p>Takes an identifier and returns an array of related identifiers from the\nnumbers server.\n"],["identifier_to_local_identifier","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_local_identifier","(identifier)","<p>Converts e.g. ‘papyri.info/hgv/1234’ to ‘/hgv/1234’\n"],["identifier_to_numbers_server_response","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_numbers_server_response","(identifier, decorator = 'rdf')","<p>Gets the HTTP response for a given identifier.\n"],["identifier_to_parts","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_parts","(identifier)","<p>Gets the ‘parts’ for an identifier, useful for figuring out hierarchy\ncoming in from an identifier class. …\n"],["identifier_to_path","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_path","(identifier, decorator)","<p>Converts e.g. ‘papyri.info/hgv/1234’ to ‘hgv/1234/rdf’, where\n‘rdf’ is the decorator. Used by numbers_server_response …\n"],["identifier_to_ref","Publication","Publication.html#method-i-identifier_to_ref","(str)","<p>Returns identifier string in form acceptable to  “.git/refs/”\n"],["identifier_to_title","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_title","(identifier)","<p>Gets the title for an identifier using its frbr:Work/rdf representation.\nCurrently only works for HGV …\n"],["identifier_to_url","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_to_url","(identifier)","<p>Converts e.g. ‘papyri.info/hgv/1234’ to ‘papyri.info/hgv/1234’\n"],["identifier_url_to_identifier","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifier_url_to_identifier","(identifier)","<p>Converts e.g. ‘papyri.info/hgv/1234/rdf’ to ‘papyri.info/hgv/1234’\n"],["identifiers_to_hash","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-identifiers_to_hash","(identifiers)","<p>Takes an array of identifiers and Returns a hash with IDENTIFIER_NAMESPACE\n(hgv, tm, ddbdp etc)  as the …\n"],["increase_timeout","Repository","Repository.html#method-c-increase_timeout","()",""],["index","BoardsController","BoardsController.html#method-i-index","()","<p>GET /boards GET /boards.xml\n"],["index","CommentsController","CommentsController.html#method-i-index","()","<p>GET /comments GET /comments.xml\n"],["index","CommunitiesController","CommunitiesController.html#method-i-index","()","<p>GET /communities GET /communities.xml\n"],["index","DecreesController","DecreesController.html#method-i-index","()","<p>GET /decrees GET /decrees.xml\n"],["index","DocosController","DocosController.html#method-i-index","()","<p>layout ‘site’ caches_page :documentation\n\n<pre>GET /docos\nGET /docos.xml</pre>\n"],["index","EmailersController","EmailersController.html#method-i-index","()","<p>GET /emailers GET /emailers.xml\n"],["index","EventsController","EventsController.html#method-i-index","()","<p>GET /events GET /events.xml\n"],["index","HgvTransGlossariesController","HgvTransGlossariesController.html#method-i-index","()","<p>GET /hgv_trans_glossaries GET /hgv_trans_glossaries.xml\n"],["index","PublicationsController","PublicationsController.html#method-i-index","()","<p>GET /publications GET /publications.xml\n"],["index","RepositoriesController","RepositoriesController.html#method-i-index","()",""],["index","VotesController","VotesController.html#method-i-index","()","<p>GET /votes GET /votes.xml\n"],["index","WelcomeController","WelcomeController.html#method-i-index","()","<p>layout ‘site’\n"],["index_user_admins","UserController","UserController.html#method-i-index_user_admins","()",""],["info","UserController","UserController.html#method-i-info","()","<p>Gets info for the current user in json format. <strong>Returns</strong>\n<p>User model for the current user.\n<p>nil if no user …\n"],["input_source_from_string","JRubyXML","JRubyXML.html#method-c-input_source_from_string","(input_string)",""],["insertFootnote","HelperController","HelperController.html#method-i-insertFootnote","()","<p>Commentary uses to insert footnote markup into front matter or LBL\ncommentary\n"],["insertLinkBiblio","HelperController","HelperController.html#method-i-insertLinkBiblio","()","<p>Commentary uses to insert Bibliography links into front matter or LBL\ncommentary\n"],["insertLinkPN","HelperController","HelperController.html#method-i-insertLinkPN","()","<p>Commentary uses to insert PN links into front matter or LBL commentary\n"],["insert_error_here","IdentifiersController","IdentifiersController.html#method-i-insert_error_here","(content, line, column)","<p>Used to insert ‘**POSSIBLE ERROR**’ in Leiden+ and XML edit page when\nthere is a parse or validation …\n"],["insertlink","HelperController","HelperController.html#method-i-insertlink","()","<p>Commentary uses to insert non-PN links into front matter or LBL  commentary\n"],["is_community_publication?","Publication","Publication.html#method-i-is_community_publication-3F","()",""],["is_reprinted?","DDBIdentifier","DDBIdentifier.html#method-i-is_reprinted-3F","()",""],["is_submittable?","Community","Community.html#method-i-is_submittable-3F","()","<p>Checks to see whether or not to allow members to submit to the community\n<p><strong>Returns</strong>\n<p>true if the community …\n"],["is_valid_xml?","BiblioIdentifier","BiblioIdentifier.html#method-i-is_valid_xml-3F","(content = nil)","<p>Validation of identifier XML file against tei-epidoc.rng file\n<p><strong>Args</strong>  :\n<p><code>content</code> -&gt; XML to validate if …\n"],["is_valid_xml?","Identifier","Identifier.html#method-i-is_valid_xml-3F","(content = nil)","<p>Validation of indentifier XML file against tei-epidoc.rng file\n<p><strong>Args</strong>  :\n<p><code>content</code> -&gt; XML to validate if …\n"],["label","BiblioFormBuilder","BiblioFormBuilder.html#method-i-label","(label, *args)","<p>Generates a label tag\n<p><strong>Args</strong>  :\n<p><code>label</code> → biblio key, e.g. <code>:articleTitle</code>\n"],["lang_codes","HGVTransGlossary","HGVTransGlossary.html#method-c-lang_codes","()",""],["leave_community","UserController","UserController.html#method-i-leave_community","()",""],["legal?","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-legal-3F","(candide)","<p>Determines whether incoming user data contains any valid data or whether is\nconsindered to be empty\n<p><strong>Args</strong> …\n"],["leiden2xml","LeidenController","LeidenController.html#method-i-leiden2xml","()","<p>Transform DDB Text Leiden+ to XML - used in the DDB Text Helper menu - used\nin javascript ajax call\n<p><strong>Params</strong> …\n"],["leiden_plus","DDBIdentifier","DDBIdentifier.html#method-i-leiden_plus","()","<p>Retrieves the XML for the the DDB Text identifier currently processing from\nthe repository\n<p>Applies preprocessing …\n"],["leiden_plus_to_xml","DDBIdentifier","DDBIdentifier.html#method-i-leiden_plus_to_xml","(content)","<p>Transforms Leiden+ to XML\n<p>Retrieves the current version of XML for this DDBIdentifier\n<p>Replace the ‘div …\n"],["leiden_plus_xml","Leiden","Leiden.html#method-c-leiden_plus_xml","(content)","<p>Converts DDB Text Leiden+ to XML\n<p>checks argument to see what Leiden+ needs to be added to parse in the …\n"],["leiden_trans","HGVTransIdentifier","HGVTransIdentifier.html#method-i-leiden_trans","()","<p>Retrieves the XML for the the Translation identifier currently processing\nfrom the repository\n<p>Checks if …\n"],["leiden_translation_to_xml","HGVTransIdentifier","HGVTransIdentifier.html#method-i-leiden_translation_to_xml","(content)","<p>Transforms Translation Leiden+ to XML\n<p>Retrieves the current version of XML for this DDBIdentifier\n<p>Replace …\n"],["line_positive_and_gt_zero","Doco","Doco.html#method-i-line_positive_and_gt_zero","()","<p>line number validation for docos record\n"],["linebreak","TranslationHelperController","TranslationHelperController.html#method-i-linebreak","()","<p>Helper Linebreak\n"],["list_publications","CommunitiesController","CommunitiesController.html#method-i-list_publications","()","<p>List all the publications that belong to a community. (hidden view as of\n10-10-2011)\n"],["log_info","Publication","Publication.html#method-i-log_info","()","<p>Outputs publication information and content to the Rails logger.\n"],["login_return","RpxController","RpxController.html#method-i-login_return","()",""],["make_label","BiblioFormBuilder","BiblioFormBuilder.html#method-i-make_label","(label)","<p>Provides translated label tag for biblio data\n<p><strong>Args</strong>  :\n<p><code>label</code> → key, any valid biblio :key\n"],["make_options","BiblioFormBuilder","BiblioFormBuilder.html#method-i-make_options","(label)","<p>Provides translated values to be used in a drop down box\n<p><strong>Args</strong>  :\n<p><code>label</code> → key, <code>:language</code>, <code>:language</code>,\n…\n"],["map","Rpx::RpxHelper","Rpx/RpxHelper.html#method-i-map","(identifier, key)",""],["mappings","Rpx::RpxHelper","Rpx/RpxHelper.html#method-i-mappings","(primary_key)",""],["master_list","PublicationsController","PublicationsController.html#method-i-master_list","()",""],["merge_base","Publication","Publication.html#method-i-merge_base","(branch = 'master')",""],["modified?","Publication","Publication.html#method-i-modified-3F","()","<p><strong>Returns</strong>\n<p><code>true</code> if any of the identifiers in the publication have been\nmodified.\n<p><code>false</code> if none of the identifiers …\n"],["monthFromIso","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-monthFromIso","(iso)","<p>Facade for HgvDate.extractFromIso\n<p><strong>Args</strong>  :\n<p><code>iso</code> ISO formatted date <code>String</code>\n"],["monthOptions","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-monthOptions","()","<p>Assembles all valid month qualifiers for HGV date (<code>beginning</code>,\n<code>middle</code>, <code>end</code>, etc.)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s …\n"],["mutable?","BiblioIdentifier","BiblioIdentifier.html#method-i-mutable-3F","()","<p>Checks whether the user may be allowed to edit the content of this biblio\nrecord\n<p><strong>Returns</strong> :\n<p>true if user …\n"],["mutable?","Identifier","Identifier.html#method-i-mutable-3F","()","<p>Determines who can edit the identifier\n<p>owner can edit any of their stuff if it is not submitted\n<p>only let …\n"],["mutable?","Publication","Publication.html#method-i-mutable-3F","()","<p>Determines if publication is in ‘editing’ status and is able to be\nchanged <strong>Returns</strong>\n<p><code>true</code> if the publication …\n"],["mutable_by?","Publication","Publication.html#method-i-mutable_by-3F","(check_user)","<p><strong>Args</strong>\n<p><code>check_user</code> see if the publication is mutable by this user.\n\n<p><strong>Returns</strong>\n"],["n_attribute","BiblioIdentifier","BiblioIdentifier.html#method-i-n_attribute","()","<p>?\n"],["n_attribute","DDBIdentifier","DDBIdentifier.html#method-i-n_attribute","()","<p>Returns value for ‘n’ attribute in DDB Text template\n"],["n_attribute","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-n_attribute","()","<p>?\n"],["n_attribute","HGVTransIdentifier","HGVTransIdentifier.html#method-i-n_attribute","()","<p>Returns value for ‘n’ attribute in Translation template\n"],["name","Board","Board.html#method-i-name","()","<p>Workaround, repository needs owner name for now.\n"],["name","Repository","Repository.html#method-i-name","()",""],["named_node_map_to_hash","JRubyXML","JRubyXML.html#method-c-named_node_map_to_hash","(named_node_map)",""],["needs_reviewing?","Identifier","Identifier.html#method-i-needs_reviewing-3F","(user_id)","<p>Determines if identifier in board members dashboard needs reviewing by that\nmember\n<p><strong>Returns</strong>\n<p><code>true</code> if the …\n"],["new","BiblioIdentifier::Note","BiblioIdentifier/Note.html#method-c-new","(responsibility = '', annotation = '')",""],["new","BiblioIdentifier::PublicationPerson","BiblioIdentifier/PublicationPerson.html#method-c-new","(firstName = '', lastName = '', name = '', swap = false)",""],["new","BiblioIdentifier::Publisher","BiblioIdentifier/Publisher.html#method-c-new","(publisherType = '', value = '')",""],["new","BiblioIdentifier::RelatedArticle","BiblioIdentifier/RelatedArticle.html#method-c-new","(series = '', volume = '', number = '', ddb = '', tm = '', inventory = '')",""],["new","BiblioIdentifier::RelatedItem","BiblioIdentifier/RelatedItem.html#method-c-new","(pointer = '', ignoreList = {})",""],["new","BiblioIdentifier::ShortTitle","BiblioIdentifier/ShortTitle.html#method-c-new","(title = '', responsibility = '')",""],["new","BoardsController","BoardsController.html#method-i-new","()","<p>GET /boards/new GET /boards/new.xml\n"],["new","Comment::CombineComment","Comment/CombineComment.html#method-c-new","()",""],["new","CommentsController","CommentsController.html#method-i-new","()","<p>GET /comments/new GET /comments/new.xml\n"],["new","CommunitiesController","CommunitiesController.html#method-i-new","()","<p>GET /communities/new GET /communities/new.xml\n"],["new","DecreesController","DecreesController.html#method-i-new","()","<p>GET /decrees/new GET /decrees/new.xml\n"],["new","Doco::DocoNode","Doco/DocoNode.html#method-c-new","()",""],["new","DocosController","DocosController.html#method-i-new","()","<p>GET /docos/new GET /docos/new.xml if :id param is blank, start with blank\nform, otherwise, fill in form …\n"],["new","EmailersController","EmailersController.html#method-i-new","()","<p>GET /emailers/new GET /emailers/new.xml\n"],["new","EventsController","EventsController.html#method-i-new","()","<p>GET /events/new GET /events/new.xml\n"],["new","GitConf","GitConf.html#method-c-new","()",""],["new","HGVMetaIdentifier::HgvMetaConfiguration","HGVMetaIdentifier/HgvMetaConfiguration.html#method-c-new","()","<p>Constructor laods and complements HGV configuration from\n<code>config/hgv.yml</code> and prepares a list that contains …\n"],["new","HGVTransGlossary::Entry","HGVTransGlossary/Entry.html#method-c-new","(xml_item = nil, attributes_hash = nil)",""],["new","HgvMetaIdentifierHelper::HgvGeo::GeoSpot","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html#method-c-new","(init = nil)","<p>Constructor\n<p><strong>Args</strong>  :\n<p><code>init</code> → <code>Hash</code> object containing geo data as\nprovided by the model class <code>BiblioIdentifier</code> …\n"],["new","HgvMetaIdentifierHelper::HgvGeo::Place","HgvMetaIdentifierHelper/HgvGeo/Place.html#method-c-new","(init = nil)","<p>Constructor\n<p><strong>Args</strong>  :\n<p><code>init</code> → <code>Hash</code> object containing place data as\nprovided by the model class <code>BiblioIdentifier</code> …\n"],["new","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-c-new","(init = nil)","<p>Constructor\n<p><strong>Args</strong>  :\n<p><code>init</code> → <code>Hash</code> object containing provenance data\nas provided by the model class <code>BiblioIdentifier</code> …\n"],["new","JRubyXML::EpiDocP4Validator","JRubyXML/EpiDocP4Validator.html#method-c-new","()",""],["new","JRubyXML::EpiDocP5Validator","JRubyXML/EpiDocP5Validator.html#method-c-new","()",""],["new","JRubyXML::NamespaceContext","JRubyXML/NamespaceContext.html#method-c-new","(root_node_attribute_hash)",""],["new","JRubyXML::ParseError","JRubyXML/ParseError.html#method-c-new","(line, column)",""],["new","JRubyXML::RDFValidator","JRubyXML/RDFValidator.html#method-c-new","()",""],["new","LinkingInfo","LinkingInfo.html#method-c-new","(controller, action, id)",""],["new","PublicationsController","PublicationsController.html#method-i-new","()",""],["new","Repository","Repository.html#method-c-new","(master = nil)","<p>Allow Repository instances to be created outside User context. These\ninstances will only work with the …\n"],["new","Rpx::RpxException","Rpx/RpxException.html#method-c-new","(http_response)",""],["new","Rpx::RpxHelper","Rpx/RpxHelper.html#method-c-new","(api_key, base_url, realm)",""],["new","VotesController","VotesController.html#method-i-new","()","<p>GET /votes/new GET /votes/new.xml\n"],["new_from_template","HGVTransIdentifier","HGVTransIdentifier.html#method-c-new_from_template","(publication)","<p>Create empty, default Translation XML file based on the format of the DDB\nText file (div’s, ab’s, etc.) …\n"],["new_from_template","Identifier","Identifier.html#method-c-new_from_template","(publication)","<p>Create default XML file and identifier model entry for associated\nidentifier class\n<p><strong>Args</strong>  :\n<p><code>publication</code> …\n"],["new_from_templates","Publication","Publication.html#method-c-new_from_templates","(creator)","<p>Creates a new publication from templates found in app/data/templates. The\nnew publication contains a …\n"],["new_lang","TranslationHelperController","TranslationHelperController.html#method-i-new_lang","()","<p>Helper - view not in use - using button to and ‘add_new_lang_to_xml’\nmethod in hgv_trans_identifiers_controller …\n"],["next_temporary_identifier","BiblioIdentifier","BiblioIdentifier.html#method-c-next_temporary_identifier","()","<p>Determines the next ‘SoSOL’ temporary name for the associated\nidentifier This overrides the identifier …\n"],["next_temporary_identifier","Identifier","Identifier.html#method-c-next_temporary_identifier","()","<p>Determines the next ‘SoSOL’ temporary name for the associated\nidentifier\n<p>starts at ‘1’ each year\n<p><strong>Returns</strong> …\n"],["number","HelperController","HelperController.html#method-i-number","()","<p>Helper Markup Numbers\n"],["offset=","HgvMetaIdentifierHelper::HgvGeo::GeoSpot","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html#method-i-offset-3D","(value)","<p>Mutator method for member variable <code>offset</code> If value for\n<code>offset</code> is invalid <code>offset</code> will be set to\n<code>nil</code> instead …\n"],["offsetOptions","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-offsetOptions","()","<p>Assembles all valid offset options for HGV date (<code>before</code>,\n<code>after</code>, etc.)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s that …\n"],["offsetOptions","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-offsetOptions","()","<p>Assembles all valid offset options for HGV geo spot (<code>near</code>)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s that can be used …\n"],["origin","Identifier","Identifier.html#method-i-origin","()","<p><strong>Returns</strong> :\n<p>the originally created publication of this identifier (publciation that\ndoes not have a parent …\n\n\n"],["origin","Publication","Publication.html#method-i-origin","()","<p>Finds the publication with no parent. This will be the creators copy.\n<p><strong>Returns</strong> <code>publication</code> that is the …\n"],["overview","BoardsController","BoardsController.html#method-i-overview","()","<p>Presents overview for publication.\n"],["owner","Identifier","Identifier.html#method-i-owner","()","<p>Determines the user who own’s this identifer based on the publication it\nis a part of\n<p><strong>Returns</strong> :\n<p>identifier …\n"],["owner","Repository","Repository.html#method-i-owner","()",""],["ownership_guard","PublicationsController","PublicationsController.html#method-i-ownership_guard","()",""],["parent","Identifier","Identifier.html#method-i-parent","()","<p><strong>Returns</strong> :\n<p>the parent publication of this identifier\n\n\n"],["path_to_numbers_server_response","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-path_to_numbers_server_response","(path)","<p>Gets the HTTP response for a given URL path.\n"],["perform_action?","Decree","Decree.html#method-i-perform_action-3F","(votes)","<p><strong>Args</strong>:\n<p><code>votes</code> set of votes to be tallied to determine if decree should\nbe triggered\n\n<p><strong>Returns</strong>:\n"],["populateAtomFromHash","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-i-populateAtomFromHash","(hash)","<p>Updates instance variables from a hash\n<p><strong>Args</strong>  :\n<p><code>epiDocList</code> → data contained in\n<code>BiblioIdentifier</code>‘s <code>:provenance</code> …\n"],["populateFromEpiDoc","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDoc","()","<p>Retrieves biblio information from EpiDoc fragment and stores in member\nvariables for later and handy …\n"],["populateFromEpiDocContainer","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocContainer","()","<p>Shortcut access to method <code>populateFromEpiDocRelatedItem</code> for\ncontainer elements (books or journals) Side …\n"],["populateFromEpiDocNote","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocNote","()","<p>Scans EpiDoc document for remarks and annotation and stores them in member\n+self+ Side effect on +self …\n"],["populateFromEpiDocOriginalBp","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocOriginalBp","()","<p>Gets original BP data from EpiDoc TEI:seg tags (Index, Index bis, Titre,\nPublication, Resumé, S.B. &amp; …\n"],["populateFromEpiDocPerson","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocPerson","(key)","<p>Reads author and editor information from EpiDoc and writes as objects of\nclass <code>PublicationPerson</code> to + …\n"],["populateFromEpiDocPublisher","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocPublisher","()","<p>Retrieves publisher information from EpiDoc, i.e. place names as well as\nnames of persons or organisations …\n"],["populateFromEpiDocRelatedArticle","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocRelatedArticle","()","<p>Retrieves related articles (series, volume, number, ddb, tm, inventory)\nfrom EpiDoc writes a list of …\n"],["populateFromEpiDocRelatedItem","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocRelatedItem","(typeX, classX)","<p>Generic method to retrieve EpiDoc data from standard biblio structures of\n+TEI:relatedItem+ and save …\n"],["populateFromEpiDocReviewee","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocReviewee","()","<p>Shortcut access to method <code>populateFromEpiDocRelatedItem</code> for\nreviewees Side effect on +self+\n"],["populateFromEpiDocShortTitle","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocShortTitle","(key)","<p>Populates short title attributes with objects of class\n<code>ShortTitle</code> and fills them with all information …\n"],["populateFromEpiDocSimple","BiblioIdentifier","BiblioIdentifier.html#method-i-populateFromEpiDocSimple","(key)","<p>Retrieves information from EpiDoc fragmet which are single values (i.e.\ntags that are not repeated, no …\n"],["populate_epidoc_attribute","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-populate_epidoc_attribute","(key, value, default = nil)","<p>Saves a value to +self+ after doing some validity checks and some data\nsanitisation\n<p><strong>Args</strong>  :\n<p><code>key</code> → HGV …\n"],["populate_epidoc_attributes_from_attributes_hash","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-populate_epidoc_attributes_from_attributes_hash","(attributes_hash)","<p>Saves the values stored within a hash object (usually generated via a\nwebbrowser form)\n<p><strong>Args</strong>  :\n<p><code>Hash</code> <code>attributes_hash</code> …\n"],["populate_identifiers_from_identifiers","Publication","Publication.html#method-i-populate_identifiers_from_identifiers","(identifiers, original_title = nil)","<p>Populates the publication’s list of identifiers. Input identifiers can be\nin the form of\n\n<pre>* an array of ...</pre>\n"],["populate_tree_from_attributes_hash","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-populate_tree_from_attributes_hash","(data, config)","<p>Uses post parameters to recursively populate an internal tree which can be\nused lateron for easy data …\n"],["precisionOptions","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-precisionOptions","()","<p>Assembles all valid precision options for HGV date (<code>ca.</code>)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s that can be used with …\n"],["preprocess","DDBIdentifier","DDBIdentifier.html#method-c-preprocess","(content)","<p>Applies the preprocess XSLT to ‘content’\n<p><strong>Args</strong>  :\n<p><code>content</code> -&gt; XML as string\n"],["preprocess_leiden","DDBIdentifier","DDBIdentifier.html#method-i-preprocess_leiden","(preprocessed_leiden)","<p>Mass substitute alternate keyboard characters for Leiden+ grammar\ncharacters\n<p>Mass substitute for consistent …\n"],["pretty_print","JRubyXML","JRubyXML.html#method-c-pretty_print","(xml_stream)",""],["preview","BiblioIdentifier","BiblioIdentifier.html#method-i-preview","(parameters = {})","<p>Generates a preview document by running an xsl transformation on the biblio\nxml document\n<p><strong>Args</strong>  :\n<p><code>parameters</code> …\n"],["preview","BiblioIdentifiersController","BiblioIdentifiersController.html#method-i-preview","()","<p>Retrieves bibliography record by +params+ and puts a preview to stage Side\neffect on +@identifier+ and …\n"],["preview","DDBIdentifier","DDBIdentifier.html#method-i-preview","(parameters = {})","<p>Retrieves the current version of XML for this DDBIdentifier\n<p>Processes XML with start-div-portlet.xsl  …\n"],["preview","DdbIdentifiersController","DdbIdentifiersController.html#method-i-preview","()","<p>GET /publications/1/ddb_identifiers/1/preview\n<p>Provides preview of what the DDB Text XML from the repository …\n\n"],["preview","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-preview","(parameters = {})","<p>Generates HTML preview for hgv metadata using EpiDoc transformation file\n<strong>start-edition.xsl</strong>\n<p><strong>Args</strong>  :\n<p><code>parameters</code> …\n"],["preview","HGVTransIdentifier","HGVTransIdentifier.html#method-i-preview","()","<p>Retrieves the current version of XML for this Translation identifier\n<p>Processes XML with start-divtrans-portlet.xsl …\n"],["preview","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-preview","()","<p>Retrieves an hgv identifier record by an incoming identifier id and creates\na preview Side effect on …\n"],["preview","HgvTransIdentifiersController","HgvTransIdentifiersController.html#method-i-preview","()","<p>GET /publications/1/ddb_identifiers/1/preview\n<p>Provides preview of what the Translation XML from the repository …\n\n"],["print","Publication","Publication.html#method-i-print","()",""],["process_numbers_server_response_body","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-process_numbers_server_response_body","(rdf_xml, xpath)","<p>Applies XPath to an XML response body\n"],["proxy","AjaxProxyController","AjaxProxyController.html#method-i-proxy","()",""],["prune_params","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-prune_params","()","<p>Gets rid of invalid user data that has been passed in, such as empty fields\nin publication information …\n"],["publication_from_identifier","PublicationsController","PublicationsController.html#method-i-publication_from_identifier","(identifier, related_identifiers = nil, optional_title = nil)",""],["publication_from_identifiers","PublicationsController","PublicationsController.html#method-i-publication_from_identifiers","(identifiers)",""],["rank","BoardsController","BoardsController.html#method-i-rank","()","<p><strong>Returns</strong> array of boards sorted by rank. Lowest rank\n(highest priority) first. If community_id is given …\n"],["read_xml_item","HGVTransGlossary::Entry","HGVTransGlossary/Entry.html#method-i-read_xml_item","(xml_item)",""],["recurse_git_tree","Repository","Repository.html#method-i-recurse_git_tree","(tree, path)",""],["refresh_usage","UserController","UserController.html#method-i-refresh_usage","()","<p>view of stats for the user id page shown with optional date limitation\n"],["related_text","HGVTransIdentifier","HGVTransIdentifier.html#method-i-related_text","()","<p>Returns the ‘last’ DDB Text identifier that is not a reprint in this\ntranlsations publication\n"],["relatives","Identifier","Identifier.html#method-i-relatives","()","<p><strong>Returns</strong> :\n<p>this idenfiers origin publication and the origin children, but not self\n\n\n"],["remove_admin","CommunitiesController","CommunitiesController.html#method-i-remove_admin","()","<p>Removes user form community admin list.\n"],["remove_current_user","CommunitiesController","CommunitiesController.html#method-i-remove_current_user","()","<p>Removes the current user from the community admin list.\n"],["remove_current_user_membership","CommunitiesController","CommunitiesController.html#method-i-remove_current_user_membership","()","<p>Removes the current user from the community members list. Used to let the\nuser leave a community.\n"],["remove_finalizer","Publication","Publication.html#method-i-remove_finalizer","()","<p>Destroys this publication’s finalizer’s copy.\n"],["remove_member","BoardsController","BoardsController.html#method-i-remove_member","()","<p>Removes a member from the board member list.\n"],["remove_member","CommunitiesController","CommunitiesController.html#method-i-remove_member","()","<p>Removes member from the communities members list.\n"],["remove_member","EmailersController","EmailersController.html#method-i-remove_member","()",""],["remove_openid","RpxController","RpxController.html#method-i-remove_openid","()",""],["rename","DdbIdentifiersController","DdbIdentifiersController.html#method-i-rename","()","<p>PUT /publications/1/ddb_identifiers/1/rename Executes the actual rename of\nthe ‘SoSOL’ temporary identifer …\n"],["rename","Identifier","Identifier.html#method-i-rename","(new_name, options = {})","<p>Used to rename an identifier from the ‘SoSOL’ temporary name to the\ncorrect ‘collection’ name\n<p>also renames …\n"],["rename","IdentifiersController","IdentifiersController.html#method-i-rename","()","<p>PUT /publications/1/xxx_identifiers/1/rename Executes the actual rename of\nthe ‘SoSOL’ temporary identifer …\n"],["rename_file","Repository","Repository.html#method-i-rename_file","(original_path, new_path, branch, comment, actor)",""],["rename_review","IdentifiersController","IdentifiersController.html#method-i-rename_review","()","<p>GET /publications/1/xxx_identifiers/1/rename_review Used as entry point to\nrename a ‘SoSOL’ temporary …\n"],["render_404","ApplicationController","ApplicationController.html#method-i-render_404","(e)",""],["render_500","ApplicationController","ApplicationController.html#method-i-render_500","(e)",""],["render_numbers_error","ApplicationController","ApplicationController.html#method-i-render_numbers_error","(e)",""],["repo","Rails","Rails.html#method-c-repo","()",""],["repository","Identifier","Identifier.html#method-i-repository","()","<p><strong>Returns</strong> :\n<p>the repository for the owner of this identifier\n\n\n"],["repository","Publication","Publication.html#method-i-repository","()",""],["reprinted_in","DDBIdentifier","DDBIdentifier.html#method-i-reprinted_in","()",""],["result_action_approve","Identifier","Identifier.html#method-i-result_action_approve","()","<p>See documentation of result_actions method of board model\n"],["result_action_graffiti","Identifier","Identifier.html#method-i-result_action_graffiti","()","<p>See documentation of result_actions method of board model\n"],["result_action_reject","Identifier","Identifier.html#method-i-result_action_reject","()","<p>See documentation of result_actions method of board model\n"],["result_actions","Board","Board.html#method-i-result_actions","()","<p>The original idea was to allow programmers to add whatever functionality\nthey wanted to an identifier. …\n"],["result_actions_hash","Board","Board.html#method-i-result_actions_hash","()","<p><strong>Returns</strong>:\n<p>result_actions in a capitalized hash list for the select statement\n\n"],["retrieve_all_keys","HGVMetaIdentifier::HgvMetaConfiguration","HGVMetaIdentifier/HgvMetaConfiguration.html#method-i-retrieve_all_keys","(configuration_node)","<p>Recursivle retrieves all valid keys (element key, attribute keys, child\nkeys)\n<p><strong>Args</strong>  :\n<p><code>configuration_node</code> …\n"],["roman","Integer","Integer.html#method-i-roman","()","<p>Spits out the number as a roman number\n"],["roman","Integer","Integer.html#method-c-roman","(roman)","<p>Returns a roman number string\n"],["rpx_associate_url","ApplicationHelper","ApplicationHelper.html#method-i-rpx_associate_url","(signin_method='signin')",""],["rpx_signin_url","ApplicationHelper","ApplicationHelper.html#method-i-rpx_signin_url","(signin_method='signin')",""],["rpx_widget_url","ApplicationHelper","ApplicationHelper.html#method-i-rpx_widget_url","()",""],["save_broken_leiden_plus_to_xml","DDBIdentifier","DDBIdentifier.html#method-i-save_broken_leiden_plus_to_xml","(brokeleiden, commit_comment = '')","<p>Retrieves the current version of XML for this DDBIdentifier\n<p>Delete/Add the ‘div type = “edition” …\n"],["save_broken_leiden_trans_to_xml","HGVTransIdentifier","HGVTransIdentifier.html#method-i-save_broken_leiden_trans_to_xml","(brokeleiden, commit_comment = '')","<p>Retrieves the current version of XML for this Translation identifier\n<p>Delete/Add the ‘div type = “translation” …\n"],["save_comment","BiblioIdentifiersController","BiblioIdentifiersController.html#method-i-save_comment","(comment, commit_sha)","<p>Copypasted from HgvMetaIdentifiersController\n"],["save_comment","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-save_comment","(comment, commit_sha)","<p>Saves user’s comment on a save operation to the database\n<p><strong>Args</strong>  :\n<p><code>comment</code> → comment made by the user and …\n"],["select","BiblioFormBuilder","BiblioFormBuilder.html#method-i-select","(label, options = [], *args)","<p>Generates a select box with a preceding label tag\n<p><strong>Args</strong>  :\n<p><code>label</code> → biblio key, e.g. <code>:articleTitle</code>\n"],["send_email_out","EmailerMailer","EmailerMailer.html#method-i-send_email_out","(addresses, subject_line, body_content, article_content=nil)","<p>Sends general emails. <strong>Args:</strong>\n<p><code>addresses</code> an array of email addresses\n<p><code>subject_line</code> string for subject line …\n"],["send_status_emails","Board","Board.html#method-i-send_status_emails","(when_to_send, publication)","<p>Will generally be called when the status of a publication is changed.\nEmails will be sent according to …\n"],["send_to_finalizer","Publication","Publication.html#method-i-send_to_finalizer","(finalizer = nil)","<p>Finalizer is a user who is responsible for preparing the publication for\nthe final commit to canon.  …\n"],["send_withdraw_note","EmailerMailer","EmailerMailer.html#method-i-send_withdraw_note","(addresses, publication_title)","<p>Sends email indicating a publication has been withdrawn\n<strong>Args</strong>\n<p><code>addresses</code> an array of email addresses\n<p><code>publication_title</code> …\n"],["set_board_identifier_status","Publication","Publication.html#method-i-set_board_identifier_status","(status_in)","<p>Sets the board’s publication identifier status. This is used when the\nfinalizer’s copy needs to change …\n"],["set_content","BiblioIdentifier","BiblioIdentifier.html#method-i-set_content","(content, options = {})","<p>Commits identifier XML to the repository. Overrides Identifier#set_content\nto reset memoized value set …\n"],["set_content","Identifier","Identifier.html#method-i-set_content","(content, options = {})","<p>Commits identifier XML to the repository\n<p><strong>Args</strong>  :\n<p><code>content</code> -&gt; the XML you want committed to the repository …\n"],["set_end_user","CommunitiesController","CommunitiesController.html#method-i-set_end_user","()","<p>Sets the end_user for the community.  If this is not set, then publications\nmay not be submitted nor …\n"],["set_epidoc","BiblioIdentifier","BiblioIdentifier.html#method-i-set_epidoc","(attributes_hash, comment)","<p>Updates EpiDoc file with values from incoming post string, validates xml\nand commits it to the user repository …\n"],["set_epidoc","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-set_epidoc","(attributes_hash, comment)","<p>Updated EpiDoc file with values from incoming post string, validates xml\nand commits it to the user repository …\n"],["set_epidoc_attributes","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-set_epidoc_attributes","()","<p>Takes all HGV values stored within current object instance and writes them\nto EpiDoc\n<p><strong>Returns</strong> :\n<p><code>String</code> pretty …\n"],["set_epidoc_attributes_tree","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-set_epidoc_attributes_tree","(parent, xpath, data, config)","<p>:contentText =&gt; [\n\n<pre>'x',\n'y',\n'z',\n...</pre>\n<p>]\n"],["set_leiden_plus","DDBIdentifier","DDBIdentifier.html#method-i-set_leiden_plus","(leiden_plus_content, comment)","<p>Preprocesses the Leiden+ for character consistency and Xsugar grammar\n<p>Transforms Leiden+ to XML\n<p>Saves …\n"],["set_leiden_translation_content","HGVTransIdentifier","HGVTransIdentifier.html#method-i-set_leiden_translation_content","(leiden_translation_content, comment)","<p>Transforms Translation Leiden+ to XML\n<p>Saves the newly transformed XML to the repository\n<p><strong>Args</strong>  :\n"],["set_local_identifier_status","Publication","Publication.html#method-i-set_local_identifier_status","(status_in)","<p>Sets the status for publication identifiers that this publication’s board\ncontrols. Sets are made on …\n"],["set_origin_and_local_identifier_status","Publication","Publication.html#method-i-set_origin_and_local_identifier_status","(status_in)","<p>Convenience method to combine  set_origin_identifier_status &amp;\nset_local_identifier_status methods. …\n"],["set_origin_identifier_status","Publication","Publication.html#method-i-set_origin_identifier_status","(status_in)","<p>Sets the origin status for publication identifiers that this\npublication’s board controls. Sets are made …\n"],["set_xml_content","Identifier","Identifier.html#method-i-set_xml_content","(content, options)","<p>Commits identifier XML to the repository vis set_content\n<p><strong>Args</strong>  :\n<p><code>content</code> -&gt; the XML you want committed …\n"],["short_name_to_identifier","CollectionIdentifier","CollectionIdentifier.html#method-c-short_name_to_identifier","(short_name)",""],["show","BoardsController","BoardsController.html#method-i-show","()","<p>GET /boards/1 GET /boards/1.xml\n"],["show","CommentsController","CommentsController.html#method-i-show","()","<p>GET /comments/1 GET /comments/1.xml\n"],["show","CommunitiesController","CommunitiesController.html#method-i-show","()","<p>GET /communities/1 GET /communities/1.xml\n"],["show","DecreesController","DecreesController.html#method-i-show","()","<p>GET /decrees/1 GET /decrees/1.xml\n"],["show","DocosController","DocosController.html#method-i-show","()","<p>GET /docos/1 GET /docos/1.xml\n"],["show","EmailersController","EmailersController.html#method-i-show","()","<p>GET /emailers/1 GET /emailers/1.xml\n"],["show","EventsController","EventsController.html#method-i-show","()","<p>GET /events/1 GET /events/1.xml\n"],["show","HgvTransGlossariesController","HgvTransGlossariesController.html#method-i-show","()","<p>GET /hgv_trans_glossaries/1 GET /hgv_trans_glossaries/1.xml\n"],["show","PublicationsController","PublicationsController.html#method-i-show","()","<p>GET /publications/1 GET /publications/1.xml\n"],["show","UserController","UserController.html#method-i-show","()","<p>default view of stats for the user name entered/linked to\n"],["show","VotesController","VotesController.html#method-i-show","()","<p>GET /votes/1 GET /votes/1.xml\n"],["show_commit","IdentifiersController","IdentifiersController.html#method-i-show_commit","()","<p>PUT /publications/1/xxx_identifiers/1/show_commit/40 char commit id\n<p>Show the diff view of a specific get …\n\n"],["sign_in_out","CrossSiteController","CrossSiteController.html#method-i-sign_in_out","()","<p>Partial with links to sign in or sign out along with help and home.\n"],["signin","UserController","UserController.html#method-i-signin","()",""],["signin_url","Rpx::RpxHelper","Rpx/RpxHelper.html#method-i-signin_url","(dest, signin_method='signin')",""],["signout","UserController","UserController.html#method-i-signout","()",""],["sort","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-sort","(doc)","<p>Some EpiDoc nodes need to be given in a certain order (in order to\nrepresent valid EpiDoc or to suffice …\n"],["sortEpiDoc","BiblioIdentifier","BiblioIdentifier.html#method-i-sortEpiDoc","()","<p>Shifts TEI:seg tags and TEI:indo tags down to the bottom of the document\nAssumes that @epiDoc variable …\n"],["sparql","AjaxProxyController","AjaxProxyController.html#method-i-sparql","()",""],["sparql_query_to_numbers_server_response","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-sparql_query_to_numbers_server_response","(sparql_query, format = '')","<p>Gets the HTTP response for a given SPARQL query.\n"],["sparql_query_to_path","NumbersRDF::NumbersHelper","NumbersRDF/NumbersHelper.html#method-c-sparql_query_to_path","(sparql_query, format = '')","<p>Converts a pure SPARQL query string into the appropriate URL path for our\nuse.\n"],["stream_from_file","JRubyXML","JRubyXML.html#method-c-stream_from_file","(input_file)",""],["stream_from_string","JRubyXML","JRubyXML.html#method-c-stream_from_string","(input_string)",""],["stub_text_structure","HGVTransIdentifier","HGVTransIdentifier.html#method-i-stub_text_structure","(lang)","<p>Stub in Translation XML for a specific based on the format of the DDB Text\nfile (div’s, ab’s, etc) and …\n"],["submission_reason","Publication","Publication.html#method-i-submission_reason","()","<p><strong>Returns</strong> comment object with the publication’s submit\ncomment.\n"],["submit","Publication","Publication.html#method-i-submit","()","<p>Simply pointer to submit_to_next_board method.\n"],["submit","PublicationsController","PublicationsController.html#method-i-submit","()",""],["submit_to_next_board","Publication","Publication.html#method-i-submit_to_next_board","()","<p>Examines publication to see which board the publication should be submitted\nto next. Boards are sorted …\n"],["subtype=","HgvMetaIdentifierHelper::HgvGeo::GeoSpot","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html#method-i-subtype-3D","(value)","<p>Mutator method for member variable <code>subtype</code> If value for\n<code>subtype</code> is invalid <code>subtype</code> will be set to\n<code>nil</code> …\n"],["subtype=","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-i-subtype-3D","(value)","<p>Mutator method for member variable <code>subtype</code> If value for\n<code>subtype</code> is invalid <code>subtype</code> will be set to\n<code>nil</code> …\n"],["subtypeOptions","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-subtypeOptions","()","<p>Assembles all valid subtype options for HGV provenance (<code>last</code>)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s that can be used …\n"],["tally","Vote","Vote.html#method-i-tally","()","<p>Ensures vote is tallied for publication.\n"],["tally_methods_hash","Decree","Decree.html#method-c-tally_methods_hash","()","<p>Hash with friendly name for valid tally methods. Mainly for setting\nselection on forms. Methods are  …\n"],["tally_votes","Board","Board.html#method-i-tally_votes","(votes)","<p>Tallies the votes and returns the resulting decree action or returns an\nempty string if no decree has …\n"],["tally_votes","Publication","Publication.html#method-i-tally_votes","(user_votes = nil)","<p>This is where the main action takes place for deciding how votes are\norganized and what happens for vote …\n"],["temporary_path","HGVIdentifier","HGVIdentifier.html#method-i-temporary_path","()","<p>Path constructor for born-digital temporary SoSOL identifiers\n"],["terms","TranslationHelperController","TranslationHelperController.html#method-i-terms","()","<p>Helper Terms\n"],["territoryOptions","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-territoryOptions","()","<p>Assembles all valid territory (subtype) options for HGV geo spot\n(<code>nome</code>, <code>region</code>)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s …\n"],["text_area","BiblioFormBuilder","BiblioFormBuilder.html#method-i-text_area","(label, *args)","<p>Generates a text area field with a preceding label tag\n<p><strong>Args</strong>  :\n<p><code>label</code> → biblio key, e.g. <code>:articleTitle</code> …\n"],["text_field","BiblioFormBuilder","BiblioFormBuilder.html#method-i-text_field","(label, *args)","<p>Generates a text field with a preceding label tag\n<p><strong>Args</strong>  :\n<p><code>label</code> → biblio key, e.g. <code>:articleTitle</code>\n"],["title","Identifier","Identifier.html#method-i-title","()","<p>Added to speed up dashboard since titleize can be slow\n<p>gets the title from the identifier model if it …\n"],["title_to_ref","Publication","Publication.html#method-i-title_to_ref","(str)","<p>Returns title string in form acceptable to  “.git/refs/”\n"],["titleize","Identifier","Identifier.html#method-i-titleize","()","<p>Create consistent title for identifiers\n<p><strong>Returns</strong> :\n<p>title of identifier\n"],["toXmlString","BiblioIdentifier","BiblioIdentifier.html#method-i-toXmlString","(xmlObject)","<p>Converts REXML::Document / ::Element into xml string\n<p><strong>Args</strong>  :\n<p><code>xmlObject</code> → REXML::Document / ::Element …\n"],["to_chooser","HGVTransGlossary","HGVTransGlossary.html#method-i-to_chooser","()",""],["to_components","Identifier","Identifier.html#method-i-to_components","()","<p>Splits out identifier file path from the identifier model name field into\nthe separate components\n<p><strong>Returns</strong> …\n"],["to_hash","Grit::Commit","Grit/Commit.html#method-i-to_hash","()",""],["to_path","BiblioIdentifier","BiblioIdentifier.html#method-i-to_path","()","<p>?\n"],["to_path","CollectionIdentifier","CollectionIdentifier.html#method-i-to_path","()",""],["to_path","DDBIdentifier","DDBIdentifier.html#method-i-to_path","()","<p>Returns file path to DDB Text XML - e.g.\nDDB_EpiDoc_XML/bgu/bgu.10/bgu.10.1901.xml\n"],["to_path","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-to_path","()","<p>?\n"],["to_path","HGVTransGlossary","HGVTransGlossary.html#method-i-to_path","()",""],["to_path","HGVTransIdentifier","HGVTransIdentifier.html#method-i-to_path","()","<p>Returns file path to Translation XML - e.g. HGV_trans_EpiDoc/8881.xml\n"],["to_str","JRubyXML::ParseError","JRubyXML/ParseError.html#method-i-to_str","()",""],["translation_already_in_language?","HGVTransIdentifier","HGVTransIdentifier.html#method-i-translation_already_in_language-3F","(lang)","<p>Checks for existence of a specific language translation\n<p><strong>Args</strong>  :\n<p><code>lang</code> -&gt; the language you are checking …\n"],["translation_leiden_to_xml","TranslationLeiden","TranslationLeiden.html#method-c-translation_leiden_to_xml","(content)","<p>Converts Translation Leiden+ to XML\n<p>checks argument to see what Leiden+ needs to be added to parse in …\n"],["translation_leiden_to_xml","TranslationLeidenController","TranslationLeidenController.html#method-i-translation_leiden_to_xml","()","<p>Transform Translation Leiden+ to XML - used in the Translation Helper menu\n- used in javascript ajax …\n"],["tree","RepositoriesController","RepositoriesController.html#method-i-tree","()",""],["tryit","HelperController","HelperController.html#method-i-tryit","()","<p>Helper Tryit\n"],["tryit","TranslationHelperController","TranslationHelperController.html#method-i-tryit","()","<p>Helper Tryit\n"],["type=","HgvMetaIdentifierHelper::HgvGeo::GeoSpot","HgvMetaIdentifierHelper/HgvGeo/GeoSpot.html#method-i-type-3D","(value)","<p>Mutator method for member variable <code>type</code> If value for\n<code>type</code> is invalid <code>type</code> will be set to\n<code>nil</code>\n<p><strong>Args</strong>  :\n<p><code>value</code> …\n"],["type=","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-i-type-3D","(value)","<p>Mutator method for member variable <code>type</code> If value for\n<code>type</code> is invalid <code>type</code> will be set to\n<code>nil</code>\n<p><strong>Args</strong>  :\n<p><code>value</code> …\n"],["typeOptions","HgvMetaIdentifierHelper::HgvProvenance","HgvMetaIdentifierHelper/HgvProvenance.html#method-c-typeOptions","()","<p>Assembles all valid type options for HGV provenance (<code>composed</code>,\n<code>sent</code>, <code>sold</code>, etc.)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s …\n"],["unmap","Rpx::RpxHelper","Rpx/RpxHelper.html#method-i-unmap","(identifier, key)",""],["update","BiblioIdentifiersController","BiblioIdentifiersController.html#method-i-update","()","<p>Retrieves bibliography object from database and updates its values from\nincoming post data, saves comment …\n"],["update","BoardsController","BoardsController.html#method-i-update","()","<p>PUT /boards/1 PUT /boards/1.xml\n"],["update","CollectionIdentifiersController","CollectionIdentifiersController.html#method-i-update","()",""],["update","CommentsController","CommentsController.html#method-i-update","()","<p>PUT /comments/1 PUT /comments/1.xml\n"],["update","CommunitiesController","CommunitiesController.html#method-i-update","()","<p>PUT /communities/1 PUT /communities/1.xml\n"],["update","DdbIdentifiersController","DdbIdentifiersController.html#method-i-update","()","<p>PUT /publications/1/ddb_identifiers/1/update\n<p>Update DDB Text via Leiden+\n\n"],["update","DecreesController","DecreesController.html#method-i-update","()","<p>PUT /decrees/1 PUT /decrees/1.xml\n"],["update","DocosController","DocosController.html#method-i-update","()","<p>PUT /docos/1 PUT /docos/1.xml\n"],["update","EmailersController","EmailersController.html#method-i-update","()","<p>PUT /emailers/1 PUT /emailers/1.xml\n"],["update","EventsController","EventsController.html#method-i-update","()","<p>PUT /events/1 PUT /events/1.xml\n"],["update","HgvMetaIdentifiersController","HgvMetaIdentifiersController.html#method-i-update","()","<p>Retrieves hgv identifier object from database and updates its values from\nincoming post data, saves comment …\n"],["update","HgvTransGlossariesController","HgvTransGlossariesController.html#method-i-update","()","<p>PUT /hgv_trans_glossaries/1 PUT /hgv_trans_glossaries/1.xml\n"],["update","HgvTransIdentifiersController","HgvTransIdentifiersController.html#method-i-update","()","<p>Update Translation\n"],["update","VotesController","VotesController.html#method-i-update","()","<p>PUT /votes/1 PUT /votes/1.xml\n"],["updateEpiDoc","BiblioIdentifier","BiblioIdentifier.html#method-i-updateEpiDoc","()","<p>A lengthy method that is indeed a sequence of updating procedures for all\ndata fields of the biblio record …\n"],["updateEpiDocRelatedItem","BiblioIdentifier","BiblioIdentifier.html#method-i-updateEpiDocRelatedItem","(key)","<p>Method to avoid replication for related items such as, reviewees and\ncontainers, also tries to retrieve …\n"],["updateFromPost","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPost","(params)","<p>Updates internal EpiDoc representation from user parameters\n<p><strong>Args</strong>  :\n<p><code>params</code> → post data sent in from the …\n"],["updateFromPostContainer","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostContainer","()","<p>Adapter method to call <code>updateFromPostRelatedItem</code> for related\nitems of type <code>Container</code> (i.e. journals and …\n"],["updateFromPostNote","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostNote","()","<p>Writes post data concerning <code>:note</code> to +self+ (is actually a\nlist, but doesn’t say so in its names because …\n"],["updateFromPostPerson","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostPerson","(key)","<p>Updates internal variables that contains names\n<p><strong>Args</strong>  :\n<p><code>key</code> → key of person category of interest, may …\n"],["updateFromPostPublisher","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostPublisher","()","<p>Writes publisher information (names and places) to +self+ Assumes that\nmember variable +@post+ contains …\n"],["updateFromPostRelatedArticle","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostRelatedArticle","()","<p>Updates related articles from data provided via post parameters Assumes\nthat @post variable contains …\n"],["updateFromPostRelatedItem","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostRelatedItem","(typeX, classX)","<p>Method to retrieve post data concerning related items and stored in object\nvariables\n<p><strong>Args</strong>  :\n<p><code>typeX</code> → …\n"],["updateFromPostReviewee","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostReviewee","()","<p>Adapter method to call <code>updateFromPostRelatedItem</code> for related\nitems of type <code>Reviewee</code> (i.e. articles)  …\n"],["updateFromPostShortTitle","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostShortTitle","(key)","<p>Updates internal variables that deal with short titles, i.e. first name,\nlast name or a conjunction of …\n"],["updateFromPostSimple","BiblioIdentifier","BiblioIdentifier.html#method-i-updateFromPostSimple","(key)","<p>Updates internal values from post data which are simple strings\n<p><strong>Args</strong>  :\n<p><code>key</code> → key of element of interest, …\n"],["update_admins","UserController","UserController.html#method-i-update_admins","()",""],["update_commentary","DDBIdentifier","DDBIdentifier.html#method-i-update_commentary","(line_id, reference, comment_content = '', original_item_id = '', delete_comment = false)","<p>Updates DDBIdentifier XML with line by line commentary\n<p>Uses update_commentary.xsl\n<p>Saves the XML containing …\n"],["update_commentary","DdbIdentifiersController","DdbIdentifiersController.html#method-i-update_commentary","()","<p>Updates a DDB Text with Line by Line commentary\n<p><strong>Params</strong>  :\n<p><code>line_id</code> -&gt; id attribute value of the ‘li’ …\n"],["update_frontmatter_commentary","DDBIdentifier","DDBIdentifier.html#method-i-update_frontmatter_commentary","(commentary_content, delete_commentary = false)","<p>Updates DDBIdentifier XML with front matter commentary\n<p>Makes use of update_frontmatter_commentary.xsl …\n"],["update_frontmatter_commentary","DdbIdentifiersController","DdbIdentifiersController.html#method-i-update_frontmatter_commentary","()","<p>Updates a DDB Text with Front Matter commentary\n<p><strong>Params</strong>  :\n<p><code>content</code> -&gt; contains the commentary ‘Leiden’ …\n"],["update_master_from_canonical","Repository","Repository.html#method-i-update_master_from_canonical","()",""],["update_personal","UserController","UserController.html#method-i-update_personal","()",""],["update_rankings","BoardsController","BoardsController.html#method-i-update_rankings","()","<p>Sorts board rankings by given array of board id’s and saves new rankings.\n"],["update_review","CollectionIdentifiersController","CollectionIdentifiersController.html#method-i-update_review","()",""],["update_revision_desc","Identifier","Identifier.html#method-i-update_revision_desc","(comment_text, user)","<p>Add a ‘change’ tags to the tei:revisionDesc of the identifer’s XML\nfile via XSLT during the finalization …\n"],["updatexml","IdentifiersController","IdentifiersController.html#method-i-updatexml","()","<p>PUT /publications/1/xxx_identifiers/1/updatexml\n<p>updates the XML file in the repository of the associated …\n\n"],["usage_stats","UserController","UserController.html#method-i-usage_stats","()","<p>default view of stats is only for the current user, see below for all users\n"],["user_community_dashboard","UserController","UserController.html#method-i-user_community_dashboard","()","<p>Finds publications created by the current user and are part of the\nspecified community.\n"],["user_complete_dashboard","UserController","UserController.html#method-i-user_complete_dashboard","()","<p>Shows all publications for the current user (excepting archived status).\n"],["user_dashboard","UserController","UserController.html#method-i-user_dashboard","()","<p>Finds publications created by current user and are not part of a community.\n"],["user_has_voted?","Identifier","Identifier.html#method-i-user_has_voted-3F","(user_id)","<p>Determines whether a specified user has voted on this identifier or not\n<p><strong>Args</strong>  :\n<p><code>user_id</code> -&gt; the id of …\n"],["user_has_voted?","Publication","Publication.html#method-i-user_has_voted-3F","(user_id)","<p>Determines if the user has voted on this publication.\n<p><strong>Args</strong>\n<p><code>user_id</code> the id for the user whose voting record …\n"],["validate","JRubyXML::JARVValidator","JRubyXML/JARVValidator.html#method-i-validate","(input_source_xml_stream)",""],["value=","HgvMetaIdentifierHelper::HgvGeo::Provenance","HgvMetaIdentifierHelper/HgvGeo/Provenance.html#method-i-value-3D","(value)","<p>Mutator method for member variable <code>value</code> If value for member\nvariable <code>value</code> is invalid it will be set …\n"],["vote","PublicationsController","PublicationsController.html#method-i-vote","()",""],["warning","JRubyXML::ParseErrorHandler","JRubyXML/ParseErrorHandler.html#method-i-warning","(e)",""],["warning","JRubyXML::TransformErrorListener","JRubyXML/TransformErrorListener.html#method-i-warning","(e)",""],["whens_hash","EmailersController","EmailersController.html#method-i-whens_hash","()",""],["withdraw","Publication","Publication.html#method-i-withdraw","()","<p>Destroys all board copies of a publication and resets the origin\npublication’s status back to editing. …\n"],["withdraw","PublicationsController","PublicationsController.html#method-i-withdraw","()",""],["wrap_xml","BiblioIdentifier","BiblioIdentifier.html#method-i-wrap_xml","(content)","<p>Wrap biblio xml stub in biblio xml wrapper to make it valid TEI\n<p><strong>Args</strong>  :\n<p><code>content</code> -&gt; XML to wrap\n"],["write_text","PrettySsime","PrettySsime.html#method-i-write_text","(node, output)","<p>stackoverflow.com/questions/4203180\nwww.ruby-doc.org/stdlib-1.9.3/libdoc/rexml/rdoc/REXML/Formatters/Pretty.html\n…\n"],["xml2leiden","LeidenController","LeidenController.html#method-i-xml2leiden","()","<p>Transform DDB Text XML to Leiden+ - used in the DDB Text Helper menu - used\nin javascript ajax call\n<p><strong>Params</strong> …\n"],["xml_content","Identifier","Identifier.html#method-i-xml_content","()","<p><strong>Returns</strong> :\n<p>the content of the associated identifier’s XML file\n\n\n"],["xml_leiden_plus","Leiden","Leiden.html#method-c-xml_leiden_plus","(content)","<p>Converts DDB Text XML to Leiden+\n<p>uses DDBIdentifier.preprocess_abs to wrap the argument in XML needed …\n"],["xml_title_text","BiblioIdentifier","BiblioIdentifier.html#method-i-xml_title_text","()","<p>?\n"],["xml_title_text","DDBIdentifier","DDBIdentifier.html#method-i-xml_title_text","()","<p>Returns value from id_attribute as value for ‘title’ attribute in DDB\nText template\n"],["xml_title_text","HGVMetaIdentifier","HGVMetaIdentifier.html#method-i-xml_title_text","()","<p>?\n"],["xml_title_text","HGVTransIdentifier","HGVTransIdentifier.html#method-i-xml_title_text","()","<p>Returns value for ‘title’ attribute in Translation template\n"],["xml_to_entries","HGVTransGlossary","HGVTransGlossary.html#method-i-xml_to_entries","()",""],["xml_to_translation_leiden","TranslationLeiden","TranslationLeiden.html#method-c-xml_to_translation_leiden","(content)","<p>Converts Translation XML to Leiden+\n<p>wraps the argument in XML needed to parse in the XSUGAR translation …\n"],["xml_to_translation_leiden","TranslationLeidenController","TranslationLeidenController.html#method-i-xml_to_translation_leiden","()","<p>Transform Translation XML to Leiden+ - used in the Translation Helper menu\n- used in javascript ajax …\n"],["xpath","HGVMetaIdentifier::HgvMetaConfiguration","HGVMetaIdentifier/HgvMetaConfiguration.html#method-i-xpath","(key)","<p>Retrieves the xpath for a specified HGV key if the key belongs to a top\nlevel HGV configuration node, …\n"],["xpath_from_string","JRubyXML","JRubyXML.html#method-c-xpath_from_string","(input_string, namespace_context = nil)",""],["xpath_result_to_array","JRubyXML","JRubyXML.html#method-c-xpath_result_to_array","(xpath_result)",""],["xsugar","AjaxProxyController","AjaxProxyController.html#method-i-xsugar","()",""],["yearFromIso","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-yearFromIso","(iso)","<p>Facade for HgvDate.extractFromIso\n<p><strong>Args</strong>  :\n<p><code>iso</code> ISO formatted date <code>String</code>\n"],["yearOptions","HgvMetaIdentifierHelper::HgvDate","HgvMetaIdentifierHelper/HgvDate.html#method-c-yearOptions","()","<p>Assembles all valid year qualifiers for HGV date (<code>beginning</code>,\n<code>middle</code>, <code>end</code>, etc.)\n<p><strong>Returns</strong> :\n<p><code>Array</code> of +Array+s …\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>JRuby Deployment\n<p>Requirements\n\n<pre>* Java SE 6 (1.6+)\n* JRuby (1.3.1+) ''tested on 1.3.1 and 1.4.0''\n* Git (1.6.1.3+)</pre>\n"]]}}